[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "lab-submission-rag"
version = "1.0.0"
description = "RAG system for extracting laboratory submission information from scientific documents"
authors = [
    { name = "Lab RAG Team", email = "lab-rag@example.com" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.9"
keywords = ["rag", "laboratory", "nlp", "document-processing", "scientific"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Text Processing :: Linguistic",
]

dependencies = [
    # Core RAG Dependencies
    "langchain>=0.1.0",
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0",
    "numpy>=1.24.0",
    
    # Document Processing
    "PyPDF2>=3.0.0",
    "python-docx>=0.8.11",
    "aiofiles>=23.0.0",
    
    # Data Models and Validation
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # LLM APIs
    "openai>=1.3.0",
    "anthropic>=0.8.0",
    "ollama>=0.3.0",
    
    # Data Processing
    "pandas>=2.0.0",
    "openpyxl>=3.1.0",
    
    # Environment Management
    "python-dotenv>=1.0.0",
    
    # Logging and Monitoring
    "structlog>=23.0.0",
]

[project.optional-dependencies]
web = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
]

dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings>=0.23.0",
]

all = [
    "lab-submission-rag[web,dev,docs]"
]

[project.urls]
Homepage = "https://github.com/example/lab-submission-rag"
Documentation = "https://lab-submission-rag.readthedocs.io"
Repository = "https://github.com/example/lab-submission-rag.git"
Issues = "https://github.com/example/lab-submission-rag/issues"

[project.scripts]
lab-rag = "rag_orchestrator:main"

[tool.hatch.build.targets.wheel]
packages = ["rag", "models"]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["rag", "models"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 
