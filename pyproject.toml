[project]
name = "tracseq-fastmcp-enhancement"
version = "2.0.0"
description = "TracSeq 2.0 Enhanced with FastMCP for Superior AI Integration"
authors = [
    {name = "TracSeq Development Team", email = "dev@tracseq.com"},
]
readme = "README_FASTMCP_ENHANCEMENT.md"
license = {text = "MIT"}
requires-python = ">=3.11"

dependencies = [
    # Core FastMCP library
    "fastmcp>=2.9.0",
    # AI/LLM Integration
    "anthropic>=0.34.0",
    "openai>=1.3.0",
    # FastAPI and web components
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    # Data validation and modeling
    "pydantic>=2.0.0",
    # HTTP client for API integration
    "httpx>=0.24.0",
    # Database integration (for laboratory data)
    "sqlalchemy>=2.0.0",
    "asyncpg>=0.29.0",
    # Scientific computing for laboratory workflows
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "email-validator>=2.2.0",
    "pydantic-settings>=2.10.1",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    
    # Code quality
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    
    # Development tools
    "rich>=13.0.0",
    "ipython>=8.0.0",
]

laboratory = [
    # Additional laboratory-specific packages
    "biopython>=1.81",
    "scikit-learn>=1.3.0",
    "plotly>=5.17.0",
]

all = [
    "tracseq-fastmcp-enhancement[dev,laboratory]"
]

[project.urls]
"Homepage" = "https://github.com/tracseq/tracseq2.0"
"Documentation" = "https://tracseq2.0.readthedocs.io"
"Repository" = "https://github.com/tracseq/tracseq2.0"
"Bug Tracker" = "https://github.com/tracseq/tracseq2.0/issues"

[project.scripts]
fastmcp-lab-server = "fastmcp_laboratory_server:main"
tracseq-fastmcp-test = "test_fastmcp_integration:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["B011"]

[tool.ruff.isort]
known-first-party = ["tracseq", "fastmcp_laboratory_server"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "anthropic.*",
    "openai.*",
    "sqlalchemy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "fastmcp: marks tests as FastMCP-specific",
    "laboratory: marks tests as laboratory workflow tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = [".", "fastmcp_laboratory_server"]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.version]
path = "src/__init__.py" 
