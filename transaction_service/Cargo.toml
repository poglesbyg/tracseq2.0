[package]
name = "transaction_service"
version = "0.1.0"
edition = "2021"
authors = ["TracSeq Team <dev@tracseq.com>"]
description = "Distributed transaction management service using Saga pattern for TracSeq 2.0"
license = "MIT"
keywords = ["distributed-transactions", "saga", "microservices", "consistency", "laboratory"]

[dependencies]
# Web Framework
axum = { version = "0.7", features = ["macros", "json", "ws"] }
tower = { version = "0.4", features = ["full"] }
tower-http = { version = "0.5", features = ["cors", "trace", "compression-gzip"] }
hyper = { version = "1.0", features = ["full"] }

# Async Runtime
tokio = { version = "1.35", features = ["full"] }
tokio-stream = "0.1"
futures = "0.3"
async-trait = "0.1"

# Random number generation for simulations
rand = "0.8"

# Database
sqlx = { workspace = true, optional = true }
uuid = { version = "1.6", features = ["v4", "serde"] }

# Connection pooling
deadpool = "0.10"

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_yaml = "0.9"

# Time handling
chrono = { version = "0.4", features = ["serde"] }

# Configuration
config = "0.14"
dotenvy = "0.15"

# Logging and observability
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"] }
metrics = "0.22"
metrics-exporter-prometheus = "0.13"

# Error handling
anyhow = "1.0"
thiserror = "1.0"

# HTTP client for service communication
reqwest = { version = "0.11", features = ["json", "stream"] }

# Event service integration
event_service = { path = "../event_service" }

# Redis for state management
redis = { version = "0.24", features = ["streams", "connection-manager", "tokio-comp"] }
deadpool-redis = "0.14"

# Validation
validator = { version = "0.18", features = ["derive"] }

# Retry and resilience
tokio-retry = "0.3"

# State machine
state_machine_future = "0.2"

# Distributed locking
etcd-rs = { version = "1.0", optional = true }

# Monitoring and health checks
# health-check = "0.1"  # Commented out - package not found

[dev-dependencies]
# Core testing framework
tokio-test = "0.4"
anyhow = "1.0"

# HTTP testing
axum-test = "15.0"
tower = { version = "0.4", features = ["util", "timeout", "load-shed", "limit"] }
tower-http = { version = "0.5", features = ["fs", "trace", "cors", "timeout"] }

# Database testing
sqlx = { workspace = true }

# Distributed system testing
wiremock = "0.6"
mockall = "0.12"

# Performance testing
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.4"

# Test utilities
fake = { version = "2.9", features = ["derive"] }
serial_test = "3.0"
test-log = "0.2"
env_logger = "0.11"
once_cell = "1.19"

# JSON testing
serde_json = "1.0"
serde = { version = "1.0", features = ["derive"] }

# Time testing
chrono = { version = "0.4", features = ["serde"] }

# Async testing utilities
futures = "0.3"
tokio = { version = "1.36", features = ["test-util", "rt-multi-thread", "macros"] }

[features]
default = ["redis-state", "event-integration"]
redis-state = []
etcd-coordination = ["etcd-rs"]
event-integration = []
database-persistence = ["dep:sqlx"]

[[bin]]
name = "transaction_service"
path = "src/main.rs" 
