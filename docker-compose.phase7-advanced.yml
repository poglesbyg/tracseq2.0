version: '3.8'

# TracSeq 2.0 Phase 7: Advanced Microservices Patterns
# Event Sourcing, CQRS, Kafka, and Enhanced Saga Patterns

services:
  # ================================
  # EVENT STORE DATABASE
  # ================================
  
  event-store-db:
    image: postgres:15-alpine
    container_name: tracseq-event-store-db
    environment:
      POSTGRES_DB: event_store
      POSTGRES_USER: event_store_user
      POSTGRES_PASSWORD: ${EVENT_STORE_PASSWORD:-event_store_pass}
    ports:
      - "5434:5432"
    volumes:
      - event_store_data:/var/lib/postgresql/data
      - ./event-sourcing/event-store/migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - tracseq-phase7
    restart: unless-stopped

  # ================================
  # APACHE KAFKA CLUSTER
  # ================================
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: tracseq-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - tracseq-phase7
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: tracseq-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9093,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - tracseq-phase7
    restart: unless-stopped

  # Schema Registry for Kafka
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: tracseq-schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9093
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - tracseq-phase7
    restart: unless-stopped

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: tracseq-kafka-ui
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: tracseq-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    networks:
      - tracseq-phase7
    restart: unless-stopped

  # ================================
  # CQRS READ MODEL DATABASE
  # ================================
  
  read-model-db:
    image: postgres:15-alpine
    container_name: tracseq-read-model-db
    environment:
      POSTGRES_DB: read_models
      POSTGRES_USER: read_model_user
      POSTGRES_PASSWORD: ${READ_MODEL_PASSWORD:-read_model_pass}
    ports:
      - "5435:5432"
    volumes:
      - read_model_data:/var/lib/postgresql/data
    networks:
      - tracseq-phase7
    restart: unless-stopped

  # ================================
  # EVENT SOURCING SERVICE
  # ================================
  
  event-sourcing-service:
    build:
      context: .
      dockerfile: event-sourcing/Dockerfile
    container_name: tracseq-event-sourcing
    ports:
      - "8091:8091"
    environment:
      # Service Configuration
      SERVICE_NAME: event-sourcing-service
      SERVICE_PORT: 8091
      RUST_LOG: info
      
      # Database
      EVENT_STORE_URL: postgres://event_store_user:${EVENT_STORE_PASSWORD:-event_store_pass}@event-store-db:5432/event_store
      
      # Kafka
      KAFKA_BROKERS: kafka:9093
      KAFKA_CLIENT_ID: event-sourcing-service
      
      # Features
      ENABLE_SNAPSHOTS: true
      SNAPSHOT_FREQUENCY: 100
      
    depends_on:
      - event-store-db
      - kafka
    networks:
      - tracseq-phase7
    restart: unless-stopped

  # ================================
  # CQRS PROJECTION SERVICE
  # ================================
  
  projection-service:
    build:
      context: .
      dockerfile: cqrs/Dockerfile
    container_name: tracseq-projection-service
    ports:
      - "8092:8092"
    environment:
      # Service Configuration
      SERVICE_NAME: projection-service
      SERVICE_PORT: 8092
      RUST_LOG: info
      
      # Databases
      EVENT_STORE_URL: postgres://event_store_user:${EVENT_STORE_PASSWORD:-event_store_pass}@event-store-db:5432/event_store
      READ_MODEL_URL: postgres://read_model_user:${READ_MODEL_PASSWORD:-read_model_pass}@read-model-db:5432/read_models
      
      # Kafka
      KAFKA_BROKERS: kafka:9093
      KAFKA_GROUP_ID: projection-service
      KAFKA_TOPICS: laboratory.sample.events,laboratory.sequencing.events,laboratory.storage.events
      
      # Projection Configuration
      BATCH_SIZE: 100
      PROJECTION_INTERVAL_MS: 1000
      
    depends_on:
      - event-store-db
      - read-model-db
      - kafka
    networks:
      - tracseq-phase7
    restart: unless-stopped

  # ================================
  # SAGA ORCHESTRATOR SERVICE
  # ================================
  
  saga-orchestrator:
    build:
      context: .
      dockerfile: saga-enhanced/Dockerfile
    container_name: tracseq-saga-orchestrator
    ports:
      - "8093:8093"
    environment:
      # Service Configuration
      SERVICE_NAME: saga-orchestrator
      SERVICE_PORT: 8093
      RUST_LOG: info
      
      # Database
      DATABASE_URL: postgres://event_store_user:${EVENT_STORE_PASSWORD:-event_store_pass}@event-store-db:5432/event_store
      
      # Kafka
      KAFKA_BROKERS: kafka:9093
      KAFKA_CLIENT_ID: saga-orchestrator
      KAFKA_TOPICS: laboratory.saga.events
      
      # Saga Configuration
      DEFAULT_TIMEOUT_SECONDS: 300
      MAX_RETRY_ATTEMPTS: 3
      COMPENSATION_TIMEOUT_SECONDS: 600
      
      # Service URLs for saga steps
      AUTH_SERVICE_URL: http://auth-service:8080
      SAMPLE_SERVICE_URL: http://sample-service:8081
      STORAGE_SERVICE_URL: http://enhanced-storage-service:8082
      SEQUENCING_SERVICE_URL: http://sequencing-service:8084
      NOTIFICATION_SERVICE_URL: http://notification-service:8085
      
    depends_on:
      - event-store-db
      - kafka
    networks:
      - tracseq-phase7
    restart: unless-stopped

  # ================================
  # KAFKA CONNECT
  # ================================
  
  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.5.0
    container_name: tracseq-kafka-connect
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9093
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
    volumes:
      - kafka_connect_data:/usr/share/confluent-hub-components
    networks:
      - tracseq-phase7
    restart: unless-stopped

  # ================================
  # KSQLDB FOR STREAM PROCESSING
  # ================================
  
  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.5.0
    container_name: tracseq-ksqldb-server
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: kafka:9093
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    networks:
      - tracseq-phase7
    restart: unless-stopped

  # ================================
  # MONITORING
  # ================================
  
  # Kafka Exporter for Prometheus
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: tracseq-kafka-exporter
    ports:
      - "9308:9308"
    environment:
      KAFKA_URI: kafka:9093
    depends_on:
      - kafka
    networks:
      - tracseq-phase7
    restart: unless-stopped

volumes:
  event_store_data:
    driver: local
  read_model_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  kafka_connect_data:
    driver: local

networks:
  tracseq-phase7:
    driver: bridge
    name: tracseq-phase7