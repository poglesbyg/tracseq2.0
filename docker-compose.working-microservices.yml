version: '3.8'

# TracSeq 2.0 Working Microservices - Incremental Deployment
# Start with infrastructure + core services that we know work

networks:
  tracseq_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  ollama_data:

services:
  # ================================
  # INFRASTRUCTURE SERVICES
  # ================================
  
  postgres:
    image: postgres:15-alpine
    container_name: tracseq-postgres
    environment:
      POSTGRES_DB: lab_manager
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"  # Using standard port
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d lab_manager"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: tracseq-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"  # Using different port to avoid conflicts
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  ollama:
    image: ollama/ollama:latest
    container_name: tracseq-ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - tracseq_network
    restart: unless-stopped

  # ================================
  # PYTHON AI SERVICES
  # ================================

  # Lab Submission RAG Service (Port 8000)
  lab-submission-rag:
    build:
      context: ./lab_submission_rag
      dockerfile: Dockerfile
    container_name: tracseq-lab-submission-rag
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/lab_manager
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=llama3.2:3b
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_started
    volumes:
      - ./lab_submission_rag/uploads:/app/uploads
      - ./lab_submission_rag/exports:/app/exports
    networks:
      - tracseq_network
    restart: unless-stopped

  # API Gateway (Port 8089)
  api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: tracseq-api-gateway
    ports:
      - "8089:8089"
    environment:
      - GATEWAY_HOST=0.0.0.0
      - GATEWAY_PORT=8089
      - GATEWAY_DEBUG=true
      
      # Point to containerized services
      - MONOLITH__HOST=lab-manager
      - MONOLITH__PORT=3000
      
      # For future microservices
      - AUTH_SERVICE_URL=http://auth-service:8080
      - SAMPLE_SERVICE_URL=http://sample-service:8081
      
      - PYTHONUNBUFFERED=1
    depends_on:
      - lab-submission-rag
    networks:
      - tracseq_network
    restart: unless-stopped

  # Lab Manager (Port 3000) - Our working backend
  lab-manager:
    build:
      context: ./lab_manager
      dockerfile: Dockerfile
    container_name: tracseq-lab-manager
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/lab_manager
      - JWT_SECRET=dev-jwt-secret-change-in-production
      - STORAGE_PATH=/usr/local/bin/storage
      - RAG_SERVICE_URL=http://lab-submission-rag:8000
      - RUST_LOG=info
      - SQLX_OFFLINE=false
    depends_on:
      postgres:
        condition: service_healthy
      lab-submission-rag:
        condition: service_started
    volumes:
      - ./lab_manager/storage:/usr/local/bin/storage
    networks:
      - tracseq_network
    restart: unless-stopped

  # ================================
  # ADDITIONAL RUST MICROSERVICES
  # (Add these one by one as we verify they work)
  # ================================

  # Authentication Service (Port 8080)
  auth-service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: tracseq-auth-service
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/lab_manager
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-jwt-secret-change-in-production
      - RUST_LOG=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tracseq_network
    restart: unless-stopped

  # Sample Service (Port 8081)
  sample-service:
    build:
      context: ./sample_service
      dockerfile: Dockerfile
    container_name: tracseq-sample-service
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/lab_manager
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RUST_LOG=info
    depends_on:
      - postgres
      - auth-service
    networks:
      - tracseq_network
    restart: unless-stopped

  # ================================
  # FRONTEND (Development)
  # ================================
  
  frontend:
    build:
      context: ./lab_manager/frontend
      dockerfile: Dockerfile.dev
    container_name: tracseq-frontend
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8089
    volumes:
      - ./lab_manager/frontend:/app
      - /app/node_modules
    depends_on:
      - api-gateway
      - lab-manager
    networks:
      - tracseq_network
    restart: unless-stopped 