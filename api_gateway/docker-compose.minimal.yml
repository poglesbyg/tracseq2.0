version: '3.8'

services:
  # API Gateway (routes to existing monolith)
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.simple
    container_name: tracseq-api-gateway
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - HOST=0.0.0.0
      - PORT=8000
      
      # Route everything to existing monolith initially
      - MONOLITH__HOST=host.docker.internal
      - MONOLITH__PORT=3000
      
      # Feature flags for gradual service extraction
      - USE_AUTH_SERVICE=false
      - USE_SAMPLE_SERVICE=false
      - USE_TEMPLATE_SERVICE=true
      - USE_STORAGE_SERVICE=false
      - USE_SEQUENCING_SERVICE=false
      - USE_NOTIFICATION_SERVICE=false
      - USE_RAG_SERVICE=false
      
      # Gateway configuration
      - REQUEST_TIMEOUT=30
      - MAX_CONCURRENT_REQUESTS=1000
      
      # CORS configuration
      - CORS__ENABLED=true
      - CORS__ALLOW_ORIGINS=["http://localhost:3000","http://localhost:5173","http://localhost:8000"]
      
      # Monitoring
      - MONITORING__METRICS_ENABLED=true
      - MONITORING__LOG_REQUESTS=true
    
    volumes:
      - gateway_logs:/app/logs
    
    networks:
      - tracseq-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for gateway caching
  gateway-redis:
    image: redis:7-alpine
    container_name: tracseq-gateway-redis
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    volumes:
      - gateway_redis_data:/data
    networks:
      - tracseq-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  gateway_logs:
  gateway_redis_data:

networks:
  tracseq-network:
    driver: bridge 
