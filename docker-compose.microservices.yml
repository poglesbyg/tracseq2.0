version: '3.8'

services:
  # ================================
  # CORE MICROSERVICES
  # ================================

  # Auth Service
  auth-service:
    build: 
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: tracseq-auth-service
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@enhanced_storage_service-postgres-1:5432/lab_manager
      - REDIS_URL=redis://enhanced_storage_service-redis-1:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - AUTH_PORT=8080
      - RUST_LOG=debug
      - RUST_BACKTRACE=full
    networks:
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sample Service
  sample-service:
    build:
      context: ./sample_service
      dockerfile: Dockerfile
    container_name: tracseq-sample-service
    ports:
      - "8081:8081"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@enhanced_storage_service-postgres-1:5432/lab_manager
      - REDIS_URL=redis://enhanced_storage_service-redis-1:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - ENHANCED_STORAGE_SERVICE_URL=http://enhanced-storage-service:8082
      - RUST_LOG=info
      - RUST_BACKTRACE=1
    depends_on:
      - auth-service
    networks:
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Enhanced Storage Service
  enhanced-storage-service:
    build:
      context: ./enhanced_storage_service
      dockerfile: Dockerfile
    container_name: tracseq-enhanced-storage-service
    ports:
      - "8082:8082"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@enhanced_storage_service-postgres-1:5432/lab_manager
      - REDIS_URL=redis://enhanced_storage_service-redis-1:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - EVENT_SERVICE_URL=http://event-service:8087
      - NOTIFICATION_SERVICE_URL=http://notification-service:8085
      - RUST_LOG=info
      - RUST_BACKTRACE=1
    depends_on:
      - auth-service
    networks:
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    volumes:
      - enhanced_storage_data:/app/storage
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Template Service
  template-service:
    build:
      context: ./template_service
      dockerfile: Dockerfile
    container_name: tracseq-template-service
    ports:
      - "8083:8083"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@enhanced_storage_service-postgres-1:5432/lab_manager
      - REDIS_URL=redis://enhanced_storage_service-redis-1:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RUST_LOG=info
      - RUST_BACKTRACE=1
    depends_on:
      - auth-service
    networks:
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sequencing Service
  sequencing-service:
    build:
      context: ./sequencing_service
      dockerfile: Dockerfile
    container_name: tracseq-sequencing-service
    ports:
      - "8084:8084"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@enhanced_storage_service-postgres-1:5432/lab_manager
      - REDIS_URL=redis://enhanced_storage_service-redis-1:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - SAMPLE_SERVICE_URL=http://sample-service:8081
      - NOTIFICATION_SERVICE_URL=http://notification-service:8085
      - RUST_LOG=info
      - RUST_BACKTRACE=1
    depends_on:
      - auth-service
      - sample-service
    networks:
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: ./notification_service
      dockerfile: Dockerfile
    container_name: tracseq-notification-service
    ports:
      - "8085:8085"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@enhanced_storage_service-postgres-1:5432/lab_manager
      - REDIS_URL=redis://enhanced_storage_service-redis-1:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      - TEAMS_WEBHOOK_URL=${TEAMS_WEBHOOK_URL:-}
      - RUST_LOG=info
      - RUST_BACKTRACE=1
    depends_on:
      - auth-service
    networks:
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Enhanced RAG Service
  enhanced-rag-service:
    build:
      context: ./enhanced_rag_service
      dockerfile: Dockerfile
    container_name: tracseq-enhanced-rag-service
    ports:
      - "8086:8086"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@enhanced_storage_service-postgres-1:5432/lab_manager
      - REDIS_URL=redis://enhanced_storage_service-redis-1:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - USE_OLLAMA=true
      - OLLAMA_BASE_URL=http://tracseq20-ollama-1:11434
      - OLLAMA_MODEL=llama3.2:3b
      - PYTHONPATH=/app
    networks:
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    volumes:
      - enhanced_rag_data:/app/data
      - enhanced_rag_uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Event Service
  event-service:
    build:
      context: ./event_service
      dockerfile: Dockerfile
    container_name: tracseq-event-service
    ports:
      - "8087:8087"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@enhanced_storage_service-postgres-1:5432/lab_manager
      - REDIS_URL=redis://enhanced_storage_service-redis-1:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - PORT=8087
      - HOST=0.0.0.0
      - RUST_LOG=debug
      - RUST_BACKTRACE=full
    depends_on:
      - auth-service
    networks:
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Transaction Service (Saga Coordinator)
  transaction-service:
    build:
      context: ./transaction_service
      dockerfile: Dockerfile
    container_name: tracseq-transaction-service
    ports:
      - "8088:8088"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@enhanced_storage_service-postgres-1:5432/lab_manager
      - REDIS_URL=redis://enhanced_storage_service-redis-1:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - EVENT_SERVICE_URL=http://event-service:8087
      - RUST_LOG=info
      - RUST_BACKTRACE=1
    depends_on:
      - auth-service
      - event-service
    networks:
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (Unified Access Point)
  api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: tracseq-api-gateway
    ports:
      - "8089:8089"
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8080
      - SAMPLE_SERVICE_URL=http://sample-service:8081
      - ENHANCED_STORAGE_SERVICE_URL=http://enhanced-storage-service:8082
      - TEMPLATE_SERVICE_URL=http://template-service:8083
      - SEQUENCING_SERVICE_URL=http://sequencing-service:8084
      - NOTIFICATION_SERVICE_URL=http://notification-service:8085
      - ENHANCED_RAG_SERVICE_URL=http://enhanced-rag-service:8086
      - EVENT_SERVICE_URL=http://event-service:8087
      - TRANSACTION_SERVICE_URL=http://transaction-service:8088
      - REDIS_URL=redis://enhanced_storage_service-redis-1:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - LOG_LEVEL=INFO
    depends_on:
      - auth-service
      - sample-service
      - enhanced-storage-service
      - template-service
      - sequencing-service
      - notification-service
      - event-service
      - transaction-service
    networks:
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # MONITORING & OBSERVABILITY
  # ================================

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: tracseq-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    restart: unless-stopped

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: tracseq-jaeger
    ports:
      - "16686:16686"
      - "14250:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    restart: unless-stopped

# ================================
# VOLUMES
# ================================
volumes:
  enhanced_storage_data:
    driver: local
  enhanced_rag_data:
    driver: local
  enhanced_rag_uploads:
    driver: local
  prometheus_data:
    driver: local

# ================================
# NETWORKS
# ================================
networks:
  enhanced_storage_service_enhanced_storage_network:
    external: true
  tracseq20_lab_network:
    external: true 
