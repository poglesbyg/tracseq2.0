version: '3.8'

services:
  # =============================================================================
  # SHARED INFRASTRUCTURE
  # =============================================================================
  
  # PostgreSQL Database (Shared by all services)
  lims-postgres:
    image: postgres:15-alpine
    container_name: lims-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: lims_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - lims_postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - lims-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d lims_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache (Shared by all services)
  lims-redis:
    image: redis:7-alpine
    container_name: lims-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - lims_redis_data:/data
    networks:
      - lims-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # API GATEWAY
  # =============================================================================
  
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lims-api-gateway
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Core Configuration
      SERVICE_NAME: "TracSeq API Gateway"
      VERSION: "2.0.0"
      ENVIRONMENT: "development"
      HOST: "0.0.0.0"
      PORT: "8000"
      
      # Database Configuration (Standardized)
      DATABASE_URL: "postgresql://postgres:postgres@lims-postgres:5432/lims_db"
      DB_HOST: "lims-postgres"
      DB_PORT: "5432"
      DB_NAME: "lims_db"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_MIN_CONNECTIONS: "2"
      DB_MAX_CONNECTIONS: "10"
      DB_CONNECTION_TIMEOUT: "30"
      
      # Redis Configuration
      REDIS_URL: "redis://lims-redis:6379/0"
      
      # Service Discovery
      SERVICES__AUTH__HOST: "auth-service"
      SERVICES__AUTH__PORT: "8080"
      SERVICES__SAMPLES__HOST: "sample-service"
      SERVICES__SAMPLES__PORT: "8081"
      SERVICES__STORAGE__HOST: "enhanced-storage-service"
      SERVICES__STORAGE__PORT: "8082"
      SERVICES__TEMPLATES__HOST: "template-service"
      SERVICES__TEMPLATES__PORT: "8083"
      SERVICES__SEQUENCING__HOST: "sequencing-service"
      SERVICES__SEQUENCING__PORT: "8084"
      SERVICES__NOTIFICATIONS__HOST: "notification-service"
      SERVICES__NOTIFICATIONS__PORT: "8085"
      SERVICES__RAG__HOST: "enhanced-rag-service"
      SERVICES__RAG__PORT: "8086"
      SERVICES__EVENTS__HOST: "event-service"
      SERVICES__EVENTS__PORT: "8087"
      SERVICES__TRANSACTIONS__HOST: "transaction-service"
      SERVICES__TRANSACTIONS__PORT: "8088"
      
      # Gateway Configuration
      REQUEST_TIMEOUT: "30"
      MAX_CONCURRENT_REQUESTS: "1000"
      
      # CORS Configuration
      CORS__ENABLED: "true"
      CORS__ALLOW_ORIGINS: '["http://localhost:3000","http://localhost:5173","http://localhost:8080"]'
      
      # Authentication
      AUTHENTICATION__ENABLED: "true"
      AUTHENTICATION__JWT_SECRET_KEY: "your-secret-key-change-in-production"
      
      # Monitoring
      MONITORING__METRICS_ENABLED: "true"
      MONITORING__LOG_REQUESTS: "true"
      
    depends_on:
      lims-postgres:
        condition: service_healthy
      lims-redis:
        condition: service_healthy
    networks:
      - lims-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # CORE MICROSERVICES
  # =============================================================================
  
  # Auth Service
  auth-service:
    build:
      context: ../lims-core/auth_service
      dockerfile: Dockerfile
    container_name: lims-auth-service
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Standardized Database Configuration
      DATABASE_URL: "postgresql://postgres:postgres@lims-postgres:5432/lims_db"
      DB_HOST: "lims-postgres"
      DB_PORT: "5432"
      DB_NAME: "lims_db"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_MIN_CONNECTIONS: "2"
      DB_MAX_CONNECTIONS: "10"
      
      # Service Configuration
      PORT: "8080"
      JWT_SECRET: "your-secret-key-change-in-production"
      JWT_EXPIRATION_HOURS: "24"
      RUST_LOG: "auth_service=debug"
      
      # Redis Configuration
      REDIS_URL: "redis://lims-redis:6379/0"
      
    depends_on:
      lims-postgres:
        condition: service_healthy
      lims-redis:
        condition: service_healthy
    networks:
      - lims-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sample Service
  sample-service:
    build:
      context: ../lims-core/sample_service
      dockerfile: Dockerfile
    container_name: lims-sample-service
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      # Standardized Database Configuration
      DATABASE_URL: "postgresql://postgres:postgres@lims-postgres:5432/lims_db"
      DB_HOST: "lims-postgres"
      DB_PORT: "5432"
      DB_NAME: "lims_db"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_MIN_CONNECTIONS: "2"
      DB_MAX_CONNECTIONS: "10"
      
      # Service Configuration
      PORT: "8081"
      RUST_LOG: "sample_service=debug"
      
      # Service Dependencies
      AUTH_SERVICE_URL: "http://auth-service:8080"
      STORAGE_SERVICE_URL: "http://enhanced-storage-service:8082"
      
      # Redis Configuration
      REDIS_URL: "redis://lims-redis:6379/0"
      
    depends_on:
      lims-postgres:
        condition: service_healthy
      lims-redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - lims-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Enhanced Storage Service
  enhanced-storage-service:
    build:
      context: ../lims-enhanced/enhanced_storage_service
      dockerfile: Dockerfile
    container_name: lims-enhanced-storage-service
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      # Standardized Database Configuration
      DATABASE_URL: "postgresql://postgres:postgres@lims-postgres:5432/lims_db"
      DB_HOST: "lims-postgres"
      DB_PORT: "5432"
      DB_NAME: "lims_db"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_MIN_CONNECTIONS: "2"
      DB_MAX_CONNECTIONS: "10"
      
      # Service Configuration
      STORAGE_PORT: "8082"
      RUST_LOG: "enhanced_storage_service=debug"
      
      # Service Dependencies
      AUTH_SERVICE_URL: "http://auth-service:8080"
      
      # Redis Configuration
      REDIS_URL: "redis://lims-redis:6379/0"
      
    depends_on:
      lims-postgres:
        condition: service_healthy
      lims-redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - lims-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Template Service
  template-service:
    build:
      context: ../lims-core/template_service
      dockerfile: Dockerfile
    container_name: lims-template-service
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      # Standardized Database Configuration
      DATABASE_URL: "postgresql://postgres:postgres@lims-postgres:5432/lims_db"
      DB_HOST: "lims-postgres"
      DB_PORT: "5432"
      DB_NAME: "lims_db"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_MIN_CONNECTIONS: "2"
      DB_MAX_CONNECTIONS: "10"
      
      # Service Configuration
      PORT: "8083"
      RUST_LOG: "template_service=debug"
      
      # Service Dependencies
      AUTH_SERVICE_URL: "http://auth-service:8080"
      
      # Redis Configuration
      REDIS_URL: "redis://lims-redis:6379/0"
      
    depends_on:
      lims-postgres:
        condition: service_healthy
      lims-redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - lims-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sequencing Service
  sequencing-service:
    build:
      context: ../lims-laboratory/sequencing_service
      dockerfile: Dockerfile
    container_name: lims-sequencing-service
    restart: unless-stopped
    ports:
      - "8084:8084"
    environment:
      # Standardized Database Configuration
      DATABASE_URL: "postgresql://postgres:postgres@lims-postgres:5432/lims_db"
      DB_HOST: "lims-postgres"
      DB_PORT: "5432"
      DB_NAME: "lims_db"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_MIN_CONNECTIONS: "2"
      DB_MAX_CONNECTIONS: "10"
      
      # Service Configuration
      PORT: "8084"
      RUST_LOG: "sequencing_service=debug"
      
      # Service Dependencies
      AUTH_SERVICE_URL: "http://auth-service:8080"
      SAMPLE_SERVICE_URL: "http://sample-service:8081"
      
      # Redis Configuration
      REDIS_URL: "redis://lims-redis:6379/0"
      
    depends_on:
      lims-postgres:
        condition: service_healthy
      lims-redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      sample-service:
        condition: service_healthy
    networks:
      - lims-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: ../lims-enhanced/notification_service
      dockerfile: Dockerfile
    container_name: lims-notification-service
    restart: unless-stopped
    ports:
      - "8085:8085"
    environment:
      # Standardized Database Configuration
      DATABASE_URL: "postgresql://postgres:postgres@lims-postgres:5432/lims_db"
      DB_HOST: "lims-postgres"
      DB_PORT: "5432"
      DB_NAME: "lims_db"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_MIN_CONNECTIONS: "2"
      DB_MAX_CONNECTIONS: "10"
      
      # Service Configuration
      PORT: "8085"
      RUST_LOG: "notification_service=debug"
      
      # Service Dependencies
      AUTH_SERVICE_URL: "http://auth-service:8080"
      
      # Redis Configuration
      REDIS_URL: "redis://lims-redis:6379/0"
      
      # Notification Configuration
      SMTP_HOST: "smtp.gmail.com"
      SMTP_PORT: "587"
      SMTP_USERNAME: "${SMTP_USERNAME}"
      SMTP_PASSWORD: "${SMTP_PASSWORD}"
      
    depends_on:
      lims-postgres:
        condition: service_healthy
      lims-redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - lims-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Enhanced RAG Service
  enhanced-rag-service:
    build:
      context: ../lims-ai/enhanced_rag_service
      dockerfile: Dockerfile
    container_name: lims-enhanced-rag-service
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      # Standardized Database Configuration
      DATABASE__URL: "postgresql://postgres:postgres@lims-postgres:5432/lims_db"
      DB_HOST: "lims-postgres"
      DB_PORT: "5432"
      DB_NAME: "lims_db"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      
      # Service Configuration
      PORT: "8086"
      PYTHON_ENV: "development"
      
      # AI Configuration
      VECTOR_STORE__PROVIDER: "chromadb"
      LLM__PROVIDER: "ollama"
      LLM__MODEL: "llama3.2"
      OLLAMA_BASE_URL: "http://ollama:11434"
      
      # Redis Configuration
      REDIS_URL: "redis://lims-redis:6379/0"
      
    depends_on:
      lims-postgres:
        condition: service_healthy
      lims-redis:
        condition: service_healthy
      ollama:
        condition: service_started
    networks:
      - lims-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Event Service
  event-service:
    build:
      context: ../lims-enhanced/event_service
      dockerfile: Dockerfile
    container_name: lims-event-service
    restart: unless-stopped
    ports:
      - "8087:8087"
    environment:
      # Standardized Database Configuration
      DATABASE_URL: "postgresql://postgres:postgres@lims-postgres:5432/lims_db"
      DB_HOST: "lims-postgres"
      DB_PORT: "5432"
      DB_NAME: "lims_db"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_MIN_CONNECTIONS: "2"
      DB_MAX_CONNECTIONS: "10"
      
      # Service Configuration
      PORT: "8087"
      RUST_LOG: "event_service=debug"
      
      # Redis Configuration
      REDIS_URL: "redis://lims-redis:6379/0"
      
    depends_on:
      lims-postgres:
        condition: service_healthy
      lims-redis:
        condition: service_healthy
    networks:
      - lims-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Transaction Service
  transaction-service:
    build:
      context: ../lims-core/transaction_service
      dockerfile: Dockerfile
    container_name: lims-transaction-service
    restart: unless-stopped
    ports:
      - "8088:8088"
    environment:
      # Standardized Database Configuration
      DATABASE_URL: "postgresql://postgres:postgres@lims-postgres:5432/lims_db"
      DB_HOST: "lims-postgres"
      DB_PORT: "5432"
      DB_NAME: "lims_db"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_MIN_CONNECTIONS: "5"
      DB_MAX_CONNECTIONS: "20"
      DB_CONNECTION_TIMEOUT_SECONDS: "30"
      
      # Service Configuration
      PORT: "8088"
      RUST_LOG: "transaction_service=debug"
      
      # Transaction Configuration
      MAX_CONCURRENT_SAGAS: "100"
      DEFAULT_TIMEOUT_MS: "300000"
      CLEANUP_AFTER_HOURS: "24"
      ENABLE_PERSISTENCE: "true"
      
      # Service Dependencies
      EVENT_SERVICE_URL: "http://event-service:8087"
      RAG_SERVICE_URL: "http://enhanced-rag-service:8086"
      
      # Redis Configuration
      REDIS_URL: "redis://lims-redis:6379/0"
      
    depends_on:
      lims-postgres:
        condition: service_healthy
      lims-redis:
        condition: service_healthy
      event-service:
        condition: service_healthy
    networks:
      - lims-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # AI SERVICES
  # =============================================================================
  
  # Ollama for LLM processing
  ollama:
    image: ollama/ollama:latest
    container_name: lims-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - lims-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: lims-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - lims-network
    depends_on:
      - api-gateway

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: lims-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "admin"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - lims-network
    depends_on:
      - prometheus

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  lims_postgres_data:
    driver: local
  lims_redis_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  lims-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 