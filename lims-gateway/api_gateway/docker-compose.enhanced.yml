version: '3.8'

services:
  # Enhanced API Gateway with all robustness features
  api-gateway-enhanced:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
      args:
        - PYTHON_VERSION=3.11
    container_name: tracseq-api-gateway-enhanced
    ports:
      - "8000:8000"
      - "9090:9090"  # Prometheus metrics
    environment:
      # Core configuration
      - ENVIRONMENT=production
      - HOST=0.0.0.0
      - PORT=8000
      - LOG_LEVEL=INFO
      
      # Service endpoints
      - SERVICES__AUTH__HOST=auth-service
      - SERVICES__AUTH__PORT=8080
      - SERVICES__AUTH__RATE_LIMIT=200
      - SERVICES__SAMPLES__HOST=sample-service
      - SERVICES__SAMPLES__PORT=8081
      - SERVICES__SAMPLES__RATE_LIMIT=500
      - SERVICES__STORAGE__HOST=enhanced-storage-service
      - SERVICES__STORAGE__PORT=8082
      - SERVICES__STORAGE__RATE_LIMIT=300
      - SERVICES__TEMPLATES__HOST=template-service
      - SERVICES__TEMPLATES__PORT=8083
      - SERVICES__TEMPLATES__RATE_LIMIT=200
      - SERVICES__SEQUENCING__HOST=sequencing-service
      - SERVICES__SEQUENCING__PORT=8084
      - SERVICES__SEQUENCING__RATE_LIMIT=300
      - SERVICES__NOTIFICATIONS__HOST=notification-service
      - SERVICES__NOTIFICATIONS__PORT=8085
      - SERVICES__NOTIFICATIONS__RATE_LIMIT=200
      - SERVICES__RAG__HOST=enhanced-rag-service
      - SERVICES__RAG__PORT=8086
      - SERVICES__RAG__RATE_LIMIT=100
      
      # Enhanced features configuration
      - REQUEST_TIMEOUT=30
      - MAX_CONCURRENT_REQUESTS=1000
      - CONNECTION_POOL_SIZE=100
      - KEEPALIVE_EXPIRY=30
      
      # Circuit breaker configuration
      - CIRCUIT_BREAKER__ENABLED=true
      - CIRCUIT_BREAKER__FAILURE_THRESHOLD=5
      - CIRCUIT_BREAKER__SUCCESS_THRESHOLD=3
      - CIRCUIT_BREAKER__TIMEOUT=60
      - CIRCUIT_BREAKER__WINDOW_SIZE=100
      
      # Rate limiting configuration
      - RATE_LIMITING__ENABLED=true
      - RATE_LIMITING__ALGORITHM=adaptive
      - RATE_LIMITING__REDIS_URL=redis://gateway-redis:6379/0
      - RATE_LIMITING__GLOBAL_LIMIT=10000
      - RATE_LIMITING__ADAPTIVE_THRESHOLD=0.8
      
      # Authentication configuration
      - AUTHENTICATION__ENABLED=true
      - AUTHENTICATION__JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      - AUTHENTICATION__JWT_ALGORITHM=HS256
      - AUTHENTICATION__TOKEN_EXPIRY=3600
      - AUTHENTICATION__ENABLE_API_KEYS=true
      - AUTHENTICATION__ENABLE_PERMISSIONS=true
      - AUTHENTICATION__SECURITY_HEADERS=true
      
      # CORS configuration
      - CORS__ENABLED=true
      - CORS__ALLOW_ORIGINS=["http://localhost:3000","http://localhost:8080","https://tracseq.com"]
      - CORS__ALLOW_CREDENTIALS=true
      
      # Monitoring configuration
      - MONITORING__METRICS_ENABLED=true
      - MONITORING__TRACING_ENABLED=true
      - MONITORING__HEALTH_CHECK_INTERVAL=30
      - MONITORING__LOG_REQUESTS=true
      - MONITORING__LOG_RESPONSES=false
      
      # OpenTelemetry configuration
      - OTEL_SERVICE_NAME=api-gateway
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_PROMETHEUS_ENDPOINT=0.0.0.0:9090
    
    volumes:
      - gateway_logs:/app/logs
      - ./config/gateway.yml:/app/config/gateway.yml:ro
    
    depends_on:
      gateway-redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      jaeger:
        condition: service_started
    
    networks:
      - tracseq-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Redis for caching and rate limiting
  gateway-redis:
    image: redis:7-alpine
    container_name: tracseq-gateway-redis
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "6379:6379"
    volumes:
      - gateway_redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - tracseq-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: tracseq-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Collector HTTP endpoint
      - "14250:14250"  # Collector gRPC endpoint
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
      - MEMORY_MAX_TRACES=10000
    networks:
      - tracseq-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: tracseq-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - tracseq-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: tracseq-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,redis-datasource
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - tracseq-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Grafana Image Renderer for dashboard exports
  renderer:
    image: grafana/grafana-image-renderer:latest
    container_name: tracseq-grafana-renderer
    ports:
      - "8081:8081"
    environment:
      - ENABLE_METRICS=true
      - HTTP_PORT=8081
    networks:
      - tracseq-network
    restart: unless-stopped

  # AlertManager for alert handling
  alertmanager:
    image: prom/alertmanager:latest
    container_name: tracseq-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - tracseq-network
    restart: unless-stopped

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: tracseq-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - tracseq-network
    restart: unless-stopped

  # Load balancer for multiple gateway instances
  nginx-lb:
    image: nginx:alpine
    container_name: tracseq-nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api-gateway-enhanced
    networks:
      - tracseq-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Example backend service (Auth Service)
  auth-service:
    image: tracseq/auth-service:latest
    container_name: auth-service
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://auth_user:auth_password@auth-postgres:5432/auth_db
      - RUST_LOG=info
      - PORT=8080
    depends_on:
      auth-postgres:
        condition: service_healthy
    networks:
      - tracseq-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database for Auth Service
  auth-postgres:
    image: postgres:15-alpine
    container_name: auth-postgres
    environment:
      - POSTGRES_DB=auth_db
      - POSTGRES_USER=auth_user
      - POSTGRES_PASSWORD=auth_password
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    networks:
      - tracseq-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  gateway_logs:
    driver: local
  gateway_redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  nginx_logs:
    driver: local
  auth_postgres_data:
    driver: local

networks:
  tracseq-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16