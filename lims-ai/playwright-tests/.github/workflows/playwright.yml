name: Playwright Tests

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'lims-ai/**'
      - 'lims-ai/playwright-tests/**'
  pull_request:
    branches: [ main, dev ]
    paths:
      - 'lims-ai/**'
      - 'lims-ai/playwright-tests/**'
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [mcp-dashboard, enhanced-rag-service, lab-submission-rag, ml-platform]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        cd lims-ai
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: lims-ai/playwright-tests/package-lock.json
    
    - name: Install Playwright dependencies
      run: |
        cd lims-ai/playwright-tests
        npm ci
        npx playwright install --with-deps
    
    - name: Start services
      run: |
        cd lims-ai
        docker-compose -f docker-compose.test.yml up -d
        # Wait for services to be ready
        sleep 30
        docker-compose -f docker-compose.test.yml ps
    
    - name: Run Playwright tests for ${{ matrix.service }}
      run: |
        cd lims-ai/playwright-tests
        npm run test -- --project=${{ matrix.service }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.service }}
        path: lims-ai/playwright-tests/playwright-report/
        retention-days: 30
    
    - name: Upload test videos
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-videos-${{ matrix.service }}
        path: lims-ai/playwright-tests/test-results/videos/
        retention-days: 7
    
    - name: Stop services
      if: always()
      run: |
        cd lims-ai
        docker-compose -f docker-compose.test.yml down

  smoke-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: lims-ai/playwright-tests/package-lock.json
    
    - name: Install dependencies
      run: |
        cd lims-ai/playwright-tests
        npm ci
        npx playwright install --with-deps
    
    - name: Start minimal services
      run: |
        cd lims-ai
        # Start only essential services for smoke tests
        docker run -d -p 11434:11434 --name ollama ollama/ollama
        docker run -d -p 8100:8100 --name rag-service tracseq/enhanced-rag:latest
        sleep 20
    
    - name: Run smoke tests
      run: |
        cd lims-ai/playwright-tests
        npm run test:smoke
    
    - name: Stop services
      if: always()
      run: |
        docker stop ollama rag-service
        docker rm ollama rag-service

  integration-tests:
    timeout-minutes: 90
    runs-on: ubuntu-latest
    needs: smoke-tests
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install all dependencies
      run: |
        cd lims-ai
        pip install -r requirements.txt
        cd playwright-tests
        npm ci
        npx playwright install --with-deps
    
    - name: Start full stack
      run: |
        cd docker
        ./mcp/start-mcp.sh --ci
        # Wait for all services
        sleep 60
        ./check-all-services.sh
    
    - name: Run integration tests
      run: |
        cd lims-ai/playwright-tests
        npm run test:integration
    
    - name: Generate test report
      if: always()
      run: |
        cd lims-ai/playwright-tests
        npx playwright show-report
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-report
        path: |
          lims-ai/playwright-tests/playwright-report/
          lims-ai/playwright-tests/test-results/
        retention-days: 30
    
    - name: Stop all services
      if: always()
      run: |
        cd docker
        docker-compose -f mcp/docker-compose.mcp.yml down
        docker-compose -f production/docker-compose.production.yml down

  publish-results:
    runs-on: ubuntu-latest
    needs: [test, integration-tests]
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: test-artifacts
    
    - name: Publish test results
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./test-artifacts
        destination_dir: playwright-results/${{ github.run_number }}
    
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const testResults = fs.readFileSync('test-artifacts/integration-test-report/index.html', 'utf8');
          const comment = `## Playwright Test Results
          
          View the full test report: [Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          - âœ… Smoke Tests: Passed
          - ðŸ“Š Integration Tests: Completed
          - ðŸŽ­ Full Playwright Report: Available in artifacts
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 