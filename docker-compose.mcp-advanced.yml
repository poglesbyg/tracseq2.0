version: '3.8'

# TracSeq 2.0 Advanced MCP Integration
# Complete AI-powered laboratory management platform

services:
  #============================================================================
  # MCP INFRASTRUCTURE LAYER
  #============================================================================
  
  # MCP Registry - Central discovery and management
  mcp-registry:
    build:
      context: ./mcp_infrastructure/mcp-registry
      dockerfile: Dockerfile
    container_name: tracseq-mcp-registry
    ports:
      - "9000:9000"
    environment:
      - REGISTRY_PORT=9000
      - REGISTRY_HOST=0.0.0.0
      - DATABASE_URL=postgresql://tracseq:${POSTGRES_PASSWORD:-tracseq}@postgres:5432/mcp_registry
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - ENABLE_AUTHENTICATION=true
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret}
      - ENABLE_AGENT_DISCOVERY=true
      - MAX_AGENTS_PER_TYPE=10
      - HEARTBEAT_INTERVAL=30
      - AGENT_TIMEOUT=120
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - mcp-registry-data:/app/data
      - ./mcp_infrastructure/configs:/app/configs:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # MCP Gateway - Load balancing and intelligent routing
  mcp-gateway:
    build:
      context: ./mcp_infrastructure/mcp-gateway
      dockerfile: Dockerfile
    container_name: tracseq-mcp-gateway
    ports:
      - "9001:9001"
    environment:
      - GATEWAY_PORT=9001
      - GATEWAY_HOST=0.0.0.0
      - REGISTRY_URL=http://mcp-registry:9000
      - LOAD_BALANCER_STRATEGY=ai_optimal
      - RATE_LIMIT_REQUESTS_PER_MINUTE=1000
      - ENABLE_CORS=true
      - LOG_LEVEL=INFO
      - ENABLE_REQUEST_ROUTING=true
      - CIRCUIT_BREAKER_ENABLED=true
      - TIMEOUT_SECONDS=30
      - MAX_RETRIES=3
    depends_on:
      mcp-registry:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - ./mcp_infrastructure/gateway-configs:/app/configs:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  #============================================================================
  # MCP SERVICE SERVERS
  #============================================================================

  # Sample Service MCP Server
  sample-service-mcp:
    build:
      context: ./mcp_infrastructure/sample-service-mcp
      dockerfile: Dockerfile
    container_name: tracseq-sample-mcp
    ports:
      - "8081:8081"
    environment:
      - MCP_SERVER_PORT=8081
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_REGISTRY_URL=http://mcp-registry:9000
      - SAMPLE_SERVICE_URL=http://sample-service:8080
      - DATABASE_URL=postgresql://tracseq:${POSTGRES_PASSWORD:-tracseq}@postgres:5432/samples
      - RUST_LOG=info
      - MCP_SERVER_NAME=sample-service
      - MCP_SERVER_VERSION=2.0.0
      - OAUTH_ENABLED=true
      - OAUTH_ISSUER=${OAUTH_ISSUER:-http://auth-service:8080}
      - ENABLE_BATCH_OPERATIONS=true
      - MAX_BATCH_SIZE=1000
      - ENABLE_VALIDATION_CACHING=true
      - QUALITY_THRESHOLD=0.7
    depends_on:
      mcp-registry:
        condition: service_healthy
      sample-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - ./mcp_infrastructure/sample-service-mcp/config:/app/config:ro
      - sample-mcp-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/mcp/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # RAG Service MCP Server
  rag-service-mcp:
    build:
      context: ./mcp_infrastructure/rag-service-mcp
      dockerfile: Dockerfile
    container_name: tracseq-rag-mcp
    ports:
      - "8000:8000"
    environment:
      - MCP_SERVER_PORT=8000
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_REGISTRY_URL=http://mcp-registry:9000
      - RAG_SERVICE_URL=http://rag-service:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - VECTOR_STORE_PATH=/app/data/vector_store
      - UPLOAD_DIR=/app/data/uploads
      - LOG_LEVEL=INFO
      - MCP_SERVER_NAME=rag-service
      - MCP_SERVER_VERSION=2.0.0
      - ENABLE_DOCUMENT_CACHING=true
      - MAX_DOCUMENT_SIZE_MB=100
      - CONFIDENCE_THRESHOLD=0.7
      - ENABLE_BATCH_PROCESSING=true
      - MAX_CONCURRENT_EXTRACTIONS=5
    depends_on:
      mcp-registry:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - rag-data:/app/data
      - ./lab_submission_rag:/app/rag_service:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/mcp/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Enhanced Storage Service MCP Server
  storage-service-mcp:
    build:
      context: ./mcp_infrastructure/storage-service-mcp
      dockerfile: Dockerfile
    container_name: tracseq-storage-mcp
    ports:
      - "8082:8082"
    environment:
      - MCP_SERVER_PORT=8082
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_REGISTRY_URL=http://mcp-registry:9000
      - STORAGE_SERVICE_URL=http://enhanced-storage-service:8080
      - DATABASE_URL=postgresql://tracseq:${POSTGRES_PASSWORD:-tracseq}@postgres:5432/storage
      - REDIS_URL=redis://redis:6379/1
      - RUST_LOG=info
      - MCP_SERVER_NAME=storage-service
      - MCP_SERVER_VERSION=2.0.0
      - IOT_SENSOR_ENABLED=true
      - BLOCKCHAIN_ENABLED=false
      - ENABLE_OPTIMIZATION_AI=true
      - TEMPERATURE_MONITORING=true
      - CAPACITY_OPTIMIZATION=true
      - BARCODE_SCANNING=true
    depends_on:
      mcp-registry:
        condition: service_healthy
      enhanced-storage-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - storage-mcp-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/mcp/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Transaction Service MCP Server
  transaction-service-mcp:
    build:
      context: ./mcp_infrastructure/transaction-service-mcp
      dockerfile: Dockerfile
    container_name: tracseq-transaction-mcp
    ports:
      - "8088:8088"
    environment:
      - MCP_SERVER_PORT=8088
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_REGISTRY_URL=http://mcp-registry:9000
      - TRANSACTION_SERVICE_URL=http://transaction-service:8080
      - DATABASE_URL=postgresql://tracseq:${POSTGRES_PASSWORD:-tracseq}@postgres:5432/transactions
      - EVENT_SERVICE_URL=http://event-service:8080
      - RUST_LOG=info
      - MCP_SERVER_NAME=transaction-service
      - MCP_SERVER_VERSION=2.0.0
      - SAGA_PERSISTENCE_ENABLED=true
      - MAX_CONCURRENT_SAGAS=100
      - ENABLE_WORKFLOW_AI=true
      - TIMEOUT_SECONDS=300
      - RETRY_ATTEMPTS=3
    depends_on:
      mcp-registry:
        condition: service_healthy
      transaction-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - transaction-mcp-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/mcp/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # QA/QC Service MCP Server
  qaqc-service-mcp:
    build:
      context: ./mcp_infrastructure/qaqc-service-mcp
      dockerfile: Dockerfile
    container_name: tracseq-qaqc-mcp
    ports:
      - "8085:8085"
    environment:
      - MCP_SERVER_PORT=8085
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_REGISTRY_URL=http://mcp-registry:9000
      - QAQC_SERVICE_URL=http://qaqc-service:8080
      - DATABASE_URL=postgresql://tracseq:${POSTGRES_PASSWORD:-tracseq}@postgres:5432/qaqc
      - RUST_LOG=info
      - MCP_SERVER_NAME=qaqc-service
      - MCP_SERVER_VERSION=2.0.0
      - AI_ANALYSIS_ENABLED=true
      - COMPLIANCE_CHECKS_ENABLED=true
      - COMPUTER_VISION_ENABLED=true
      - ANOMALY_DETECTION=true
      - PREDICTIVE_QC=true
      - AUTOMATED_REPORTING=true
    depends_on:
      mcp-registry:
        condition: service_healthy
      qaqc-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - qaqc-mcp-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/mcp/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  #============================================================================
  # ADVANCED AI AGENTS
  #============================================================================

  # Multi-Agent Orchestrator
  multi-agent-orchestrator:
    build:
      context: ./mcp_infrastructure/multi-agent-orchestrator
      dockerfile: Dockerfile
    container_name: tracseq-orchestrator
    ports:
      - "9010:9010"
    environment:
      - ORCHESTRATOR_PORT=9010
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MCP_REGISTRY_URL=http://mcp-registry:9000
      - MCP_GATEWAY_URL=http://mcp-gateway:9001
      - REDIS_URL=redis://redis:6379/3
      - LOG_LEVEL=INFO
      - ENABLE_AI_AGENT_SELECTION=true
      - MAX_CONCURRENT_TASKS=50
      - TASK_TIMEOUT=300
      - COLLABORATION_ENABLED=true
      - PERFORMANCE_MONITORING=true
      - HEALTH_CHECK_INTERVAL=30
    depends_on:
      mcp-gateway:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - orchestrator-data:/app/data
      - ./mcp_infrastructure/orchestrator-configs:/app/configs:ro
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:9010/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Laboratory Assistant Agent
  lab-assistant-agent:
    build:
      context: ./mcp_infrastructure/lab-assistant-agent
      dockerfile: Dockerfile
    container_name: tracseq-lab-assistant
    ports:
      - "8090:8090"
    environment:
      - AGENT_PORT=8090
      - AGENT_NAME=laboratory_assistant
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MCP_GATEWAY_URL=http://mcp-gateway:9001
      - MCP_REGISTRY_URL=http://mcp-registry:9000
      - ORCHESTRATOR_URL=http://multi-agent-orchestrator:9010
      - CONFIDENCE_THRESHOLD=0.7
      - MAX_RETRY_ATTEMPTS=3
      - OPERATION_TIMEOUT=300
      - ENABLE_NOTIFICATIONS=true
      - LOG_LEVEL=INFO
      - AGENT_SESSION_PERSISTENCE=true
      - REDIS_URL=redis://redis:6379/4
      - ENABLE_MULTIMODAL=true
      - ENABLE_DOCUMENT_PROCESSING=true
      - ENABLE_WORKFLOW_AUTOMATION=true
    depends_on:
      multi-agent-orchestrator:
        condition: service_healthy
      sample-service-mcp:
        condition: service_healthy
      rag-service-mcp:
        condition: service_healthy
      storage-service-mcp:
        condition: service_healthy
      transaction-service-mcp:
        condition: service_healthy
      qaqc-service-mcp:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - lab-assistant-data:/app/data
      - ./lab_submission_rag/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8090/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Predictive Analytics Agent
  predictive-analytics-agent:
    build:
      context: ./mcp_infrastructure/predictive-analytics-agent
      dockerfile: Dockerfile
    container_name: tracseq-predictive-agent
    ports:
      - "8091:8091"
    environment:
      - AGENT_PORT=8091
      - AGENT_NAME=predictive_analytics
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - MCP_REGISTRY_URL=http://mcp-registry:9000
      - ORCHESTRATOR_URL=http://multi-agent-orchestrator:9010
      - DATABASE_URL=postgresql://tracseq:${POSTGRES_PASSWORD:-tracseq}@postgres:5432/predictions
      - REDIS_URL=redis://redis:6379/5
      - LOG_LEVEL=INFO
      - MODEL_TRAINING_ENABLED=true
      - PREDICTION_CACHING=true
      - CACHE_TTL_MINUTES=30
      - MODEL_RETRAIN_INTERVAL=3600
      - CONFIDENCE_THRESHOLD=0.7
      - ENABLE_ML_OPTIMIZATION=true
      - ENABLE_FEATURE_ENGINEERING=true
      - MAX_PREDICTION_BATCH_SIZE=100
    depends_on:
      multi-agent-orchestrator:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - predictive-models:/app/models
      - predictive-data:/app/data
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8091/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Quality Intelligence Agent
  quality-intelligence-agent:
    build:
      context: ./mcp_infrastructure/quality-intelligence-agent
      dockerfile: Dockerfile
    container_name: tracseq-quality-agent
    ports:
      - "8092:8092"
    environment:
      - AGENT_PORT=8092
      - AGENT_NAME=quality_intelligence
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - MCP_REGISTRY_URL=http://mcp-registry:9000
      - ORCHESTRATOR_URL=http://multi-agent-orchestrator:9010
      - DATABASE_URL=postgresql://tracseq:${POSTGRES_PASSWORD:-tracseq}@postgres:5432/quality
      - REDIS_URL=redis://redis:6379/6
      - LOG_LEVEL=INFO
      - COMPUTER_VISION_ENABLED=true
      - ANOMALY_DETECTION_ENABLED=true
      - PREDICTIVE_QC_ENABLED=true
      - COMPLIANCE_MONITORING=true
      - AUTOMATED_REPORTING=true
      - QUALITY_THRESHOLD=0.8
      - RISK_ASSESSMENT_ENABLED=true
      - ML_CLASSIFICATION_ENABLED=true
    depends_on:
      multi-agent-orchestrator:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - quality-models:/app/models
      - quality-data:/app/data
      - quality-reports:/app/reports
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8092/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Laboratory Optimization Agent
  optimization-agent:
    build:
      context: ./mcp_infrastructure/optimization-agent
      dockerfile: Dockerfile
    container_name: tracseq-optimization-agent
    ports:
      - "8093:8093"
    environment:
      - AGENT_PORT=8093
      - AGENT_NAME=optimization
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - MCP_REGISTRY_URL=http://mcp-registry:9000
      - ORCHESTRATOR_URL=http://multi-agent-orchestrator:9010
      - DATABASE_URL=postgresql://tracseq:${POSTGRES_PASSWORD:-tracseq}@postgres:5432/optimization
      - REDIS_URL=redis://redis:6379/7
      - LOG_LEVEL=INFO
      - WORKFLOW_OPTIMIZATION=true
      - RESOURCE_OPTIMIZATION=true
      - COST_OPTIMIZATION=true
      - PERFORMANCE_MONITORING=true
      - BOTTLENECK_DETECTION=true
      - CAPACITY_PLANNING=true
      - PREDICTIVE_MAINTENANCE=true
      - OPTIMIZATION_INTERVAL=300
    depends_on:
      multi-agent-orchestrator:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - optimization-data:/app/data
      - optimization-reports:/app/reports
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8093/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  #============================================================================
  # MONITORING AND ANALYTICS
  #============================================================================

  # AI Dashboard and Monitoring
  ai-dashboard:
    build:
      context: ./mcp_infrastructure/ai-dashboard
      dockerfile: Dockerfile
    container_name: tracseq-ai-dashboard
    ports:
      - "3000:3000"
    environment:
      - DASHBOARD_PORT=3000
      - MCP_REGISTRY_URL=http://mcp-registry:9000
      - MCP_GATEWAY_URL=http://mcp-gateway:9001
      - ORCHESTRATOR_URL=http://multi-agent-orchestrator:9010
      - DATABASE_URL=postgresql://tracseq:${POSTGRES_PASSWORD:-tracseq}@postgres:5432/dashboard
      - REDIS_URL=redis://redis:6379/8
      - GRAFANA_URL=http://grafana:3000
      - PROMETHEUS_URL=http://prometheus:9090
      - NODE_ENV=production
      - ENABLE_REAL_TIME_MONITORING=true
      - ENABLE_PERFORMANCE_ANALYTICS=true
      - ENABLE_PREDICTIVE_DASHBOARDS=true
      - ENABLE_AI_INSIGHTS=true
      - UPDATE_INTERVAL=5
    depends_on:
      mcp-registry:
        condition: service_healthy
      mcp-gateway:
        condition: service_healthy
      multi-agent-orchestrator:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - dashboard-data:/app/data
      - dashboard-configs:/app/configs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: tracseq-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./mcp_infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - tracseq-ai-network
    restart: unless-stopped

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: tracseq-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./mcp_infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./mcp_infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - tracseq-ai-network
    depends_on:
      - prometheus
    restart: unless-stopped

  #============================================================================
  # EXISTING TRACSEQ SERVICES (Enhanced)
  #============================================================================

  # PostgreSQL Database with AI extensions
  postgres:
    image: postgres:15
    container_name: tracseq-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=tracseq
      - POSTGRES_USER=tracseq
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-tracseq}
      - POSTGRES_INITDB_ARGS="--encoding=UTF8 --locale=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-ai-databases.sql:/docker-entrypoint-initdb.d/10-init-ai-databases.sql
      - ./scripts/init-mcp-extensions.sql:/docker-entrypoint-initdb.d/20-init-mcp-extensions.sql
    networks:
      - tracseq-ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tracseq -d tracseq"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis - Enhanced caching and session storage
  redis:
    image: redis:7-alpine
    container_name: tracseq-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
      - ./mcp_infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - tracseq-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Sample Service (Enhanced)
  sample-service:
    image: tracseq/sample-service:2.0.0
    container_name: tracseq-sample-service
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://tracseq:${POSTGRES_PASSWORD:-tracseq}@postgres:5432/samples
      - REDIS_URL=redis://redis:6379/0
      - AI_ENHANCED=true
      - MCP_INTEGRATION=true
      - BATCH_PROCESSING=true
      - VALIDATION_AI=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - sample-service-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Enhanced Storage Service
  enhanced-storage-service:
    image: tracseq/enhanced-storage-service:2.0.0
    container_name: tracseq-storage-service
    ports:
      - "8083:8080"
    environment:
      - DATABASE_URL=postgresql://tracseq:${POSTGRES_PASSWORD:-tracseq}@postgres:5432/storage
      - REDIS_URL=redis://redis:6379/1
      - IOT_SENSORS_ENABLED=true
      - AI_OPTIMIZATION=true
      - PREDICTIVE_MAINTENANCE=true
      - BLOCKCHAIN_TRACKING=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - storage-service-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Transaction Service (Enhanced)
  transaction-service:
    image: tracseq/transaction-service:2.0.0
    container_name: tracseq-transaction-service
    ports:
      - "8089:8080"
    environment:
      - DATABASE_URL=postgresql://tracseq:${POSTGRES_PASSWORD:-tracseq}@postgres:5432/transactions
      - REDIS_URL=redis://redis:6379/2
      - SAGA_ENHANCED=true
      - AI_WORKFLOW_OPTIMIZATION=true
      - PREDICTIVE_ROUTING=true
      - MAX_CONCURRENT_SAGAS=200
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - transaction-service-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # QA/QC Service (Enhanced)
  qaqc-service:
    image: tracseq/qaqc-service:2.0.0
    container_name: tracseq-qaqc-service
    ports:
      - "8086:8080"
    environment:
      - DATABASE_URL=postgresql://tracseq:${POSTGRES_PASSWORD:-tracseq}@postgres:5432/qaqc
      - REDIS_URL=redis://redis:6379/3
      - COMPUTER_VISION_ENABLED=true
      - AI_QUALITY_ASSESSMENT=true
      - PREDICTIVE_QC=true
      - ANOMALY_DETECTION=true
      - COMPLIANCE_AI=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tracseq-ai-network
    volumes:
      - qaqc-service-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

#============================================================================
# VOLUMES
#============================================================================
volumes:
  # Database and Core Storage
  postgres-data:
    driver: local
  redis-data:
    driver: local

  # MCP Infrastructure Data
  mcp-registry-data:
    driver: local
  sample-mcp-data:
    driver: local
  rag-data:
    driver: local
  storage-mcp-data:
    driver: local
  transaction-mcp-data:
    driver: local
  qaqc-mcp-data:
    driver: local

  # AI Agent Data
  orchestrator-data:
    driver: local
  lab-assistant-data:
    driver: local
  predictive-models:
    driver: local
  predictive-data:
    driver: local
  quality-models:
    driver: local
  quality-data:
    driver: local
  quality-reports:
    driver: local
  optimization-data:
    driver: local
  optimization-reports:
    driver: local

  # Monitoring and Dashboard Data
  dashboard-data:
    driver: local
  dashboard-configs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

  # Service Data
  sample-service-data:
    driver: local
  storage-service-data:
    driver: local
  transaction-service-data:
    driver: local
  qaqc-service-data:
    driver: local

#============================================================================
# NETWORKS
#============================================================================
networks:
  tracseq-ai-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/16
    labels:
      com.tracseq.description: "TracSeq 2.0 AI-Enhanced Network"
      com.tracseq.version: "2.0.0"