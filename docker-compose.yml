services:
  frontend:
    build:
      context: ./lab_manager/frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PROD_PORT:-8080}:80"
    depends_on:
      - app
    networks:
      - lab_network

  frontend-dev:
    build:
      context: ./lab_manager/frontend
      dockerfile: Dockerfile.dev
    ports:
      - "${FRONTEND_DEV_PORT:-5173}:5173"
    volumes:
      - ./lab_manager/frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - BACKEND_URL=${BACKEND_URL:-http://dev:3000}
    depends_on:
      - dev
    networks:
      - lab_network

  app:
    build: 
      context: ./lab_manager
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PROD_PORT:-3001}:3000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgres://postgres:postgres@db:5432/lab_manager}
      - RUST_LOG=${RUST_LOG:-info}
      - STORAGE_PATH=${STORAGE_PATH:-/usr/local/bin/storage}
      - RAG_SERVICE_URL=${RAG_SERVICE_URL:-http://rag-service:8000}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
    volumes:
      - app_storage:${STORAGE_PATH:-/usr/local/bin/storage}
    depends_on:
      - db
      - rag-service
    networks:
      - lab_network

  dev:
    build:
      context: ./lab_manager
      dockerfile: Dockerfile.dev
    command: cargo watch -x "run --bin lab_manager"
    volumes:
      - ./lab_manager:/usr/src/app
      - app_storage:${STORAGE_PATH:-/usr/local/bin/storage}
      - cargo_cache:/usr/local/cargo/registry
    ports:
      - "${BACKEND_DEV_PORT:-3000}:3000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgres://postgres:postgres@db:5432/lab_manager}
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-3000}
      - RUST_LOG=${RUST_LOG:-info}
      - STORAGE_PATH=${STORAGE_PATH:-/usr/local/bin/storage}
      - RAG_SERVICE_URL=${RAG_SERVICE_URL:-http://rag-service:8000}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
    depends_on:
      - db
      - rag-service
    networks:
      - lab_network

  ollama:
    image: ollama/ollama:latest
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - lab_network
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped
    # Healthcheck to ensure Ollama is ready
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  rag-service:
    build:
      context: ./lab_submission_rag
      dockerfile: Dockerfile  # Use Dockerfile.lite for lightweight builds if dependency issues occur
    ports:
      - "${RAG_SERVICE_PORT:-8000}:8000"
    environment:
      - POSTGRES_URL=${DATABASE_URL:-postgres://postgres:postgres@db:5432/lab_manager}
      - RAG_LOG_LEVEL=${RAG_LOG_LEVEL:-INFO}
      # Ollama Configuration
      - USE_OLLAMA=${USE_OLLAMA:-true}
      - LLM_PROVIDER=${LLM_PROVIDER:-ollama}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://ollama:11434}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-llama3.2:3b}
      - LLM_TEMPERATURE=${LLM_TEMPERATURE:-0.7}
      - MAX_TOKENS=${MAX_TOKENS:-2048}
      # Optional API keys (fallback if Ollama not available)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    depends_on:
      - db
      - ollama
    networks:
      - lab_network
    volumes:
      - rag_storage:/app/uploads
    restart: unless-stopped

  db:
    image: postgres:15
    ports:
      - "${DB_EXTERNAL_PORT:-5433}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-lab_manager}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - lab_network

volumes:
  postgres_data:
  app_storage:
  rag_storage:
  cargo_cache:
  ollama_data:

networks:
  lab_network:
    driver: bridge
