version: '3.8'

# TracSeq 2.0 Complete Microservices Architecture
# Includes all 15 microservices with proper orchestration

networks:
  tracseq_microservices_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  grafana_data:
  prometheus_data:

services:
  # ================================
  # INFRASTRUCTURE SERVICES
  # ================================
  
  postgres:
    image: postgres:15-alpine
    container_name: tracseq-postgres
    environment:
      POSTGRES_DB: tracseq_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - tracseq_microservices_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tracseq_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: tracseq-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - tracseq_microservices_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  ollama:
    image: ollama/ollama:latest
    container_name: tracseq-ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  # ================================
  # CORE RUST MICROSERVICES
  # ================================

  # 1. Authentication Service (Port 8080)
  auth-service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: tracseq-auth-service
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=tracseq-jwt-secret-change-in-production
      - RUST_LOG=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  # 2. Sample Service (Port 8081)
  sample-service:
    build:
      context: ./sample_service
      dockerfile: Dockerfile
    container_name: tracseq-sample-service
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - AUTH_SERVICE_URL=http://auth-service:8080
      - EVENT_SERVICE_URL=http://event-service:8087
      - RUST_LOG=info
    depends_on:
      - postgres
      - auth-service
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  # 3. Enhanced Storage Service (Port 8082)
  enhanced-storage-service:
    build:
      context: ./enhanced_storage_service
      dockerfile: Dockerfile
    container_name: tracseq-enhanced-storage-service
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - REDIS_URL=redis://redis:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RUST_LOG=info
    depends_on:
      - postgres
      - redis
      - auth-service
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  # 4. Template Service (Port 8083)
  template-service:
    build:
      context: ./template_service
      dockerfile: Dockerfile
    container_name: tracseq-template-service
    ports:
      - "8083:8083"
    environment:
      - PORT=8083
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RUST_LOG=info
    depends_on:
      - postgres
      - auth-service
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  # 5. Sequencing Service (Port 8084)
  sequencing-service:
    build:
      context: ./sequencing_service
      dockerfile: Dockerfile
    container_name: tracseq-sequencing-service
    ports:
      - "8084:8084"
    environment:
      - PORT=8084
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RUST_LOG=info
    depends_on:
      - postgres
      - auth-service
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  # 6. Notification Service (Port 8085)
  notification-service:
    build:
      context: ./notification_service
      dockerfile: Dockerfile
    container_name: tracseq-notification-service
    ports:
      - "8085:8085"
    environment:
      - PORT=8085
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - REDIS_URL=redis://redis:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RUST_LOG=info
    depends_on:
      - postgres
      - redis
      - auth-service
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  # 7. Event Service (Port 8087)
  event-service:
    build:
      context: ./event_service
      dockerfile: Dockerfile
    container_name: tracseq-event-service
    ports:
      - "8087:8087"
    environment:
      - PORT=8087
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - REDIS_URL=redis://redis:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RUST_LOG=info
    depends_on:
      - postgres
      - redis
      - auth-service
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  # 8. Transaction Service (Port 8088)
  transaction-service:
    build:
      context: ./transaction_service
      dockerfile: Dockerfile
    container_name: tracseq-transaction-service
    ports:
      - "8088:8088"
    environment:
      - PORT=8088
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - REDIS_URL=redis://redis:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RUST_LOG=info
    depends_on:
      - postgres
      - redis
      - auth-service
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  # 9. Spreadsheet Versioning Service (Port 8090)
  spreadsheet-versioning-service:
    build:
      context: ./spreadsheet_versioning_service
      dockerfile: Dockerfile
    container_name: tracseq-spreadsheet-versioning-service
    ports:
      - "8090:8090"
    environment:
      - PORT=8090
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RUST_LOG=info
    depends_on:
      - postgres
      - auth-service
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  # 10. QAQC Service (Port 8091)
  qaqc-service:
    build:
      context: ./qaqc_service
      dockerfile: Dockerfile
    container_name: tracseq-qaqc-service
    ports:
      - "8091:8091"
    environment:
      - PORT=8091
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RUST_LOG=info
    depends_on:
      - postgres
      - auth-service
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  # 11. Library Details Service (Port 8092)
  library-details-service:
    build:
      context: ./library_details_service
      dockerfile: Dockerfile
    container_name: tracseq-library-details-service
    ports:
      - "8092:8092"
    environment:
      - PORT=8092
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RUST_LOG=info
    depends_on:
      - postgres
      - auth-service
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  # ================================
  # PYTHON AI/ML MICROSERVICES
  # ================================

  # 12. Enhanced RAG Service (Port 8086)
  enhanced-rag-service:
    build:
      context: ./enhanced_rag_service
      dockerfile: Dockerfile
    container_name: tracseq-enhanced-rag-service
    ports:
      - "8086:8086"
    environment:
      - PORT=8086
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/tracseq_db
      - REDIS_URL=redis://redis:6379
      - OLLAMA_BASE_URL=http://ollama:11434
      - PYTHONUNBUFFERED=1
    depends_on:
      - postgres
      - redis
      - ollama
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  # 13. Lab Submission RAG Service (Port 8000)
  lab-submission-rag-service:
    build:
      context: ./lab_submission_rag
      dockerfile: Dockerfile
    container_name: tracseq-lab-submission-rag-service
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/tracseq_db
      - OLLAMA_BASE_URL=http://ollama:11434
      - PYTHONUNBUFFERED=1
    depends_on:
      - postgres
      - ollama
    volumes:
      - ./lab_submission_rag/uploads:/app/uploads
      - ./lab_submission_rag/exports:/app/exports
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  # 14. API Gateway (Port 8089)
  api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: tracseq-api-gateway
    ports:
      - "8089:8089"
    environment:
      - GATEWAY_HOST=0.0.0.0
      - GATEWAY_PORT=8089
      - AUTH_SERVICE_URL=http://auth-service:8080
      - SAMPLE_SERVICE_URL=http://sample-service:8081
      - STORAGE_SERVICE_URL=http://enhanced-storage-service:8082
      - PYTHONUNBUFFERED=1
    depends_on:
      - auth-service
      - sample-service
      - enhanced-storage-service
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  # 15. Lab Manager Main Service (Port 3000)
  lab-manager:
    build:
      context: ./lab_manager
      dockerfile: Dockerfile
    container_name: tracseq-lab-manager
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - API_GATEWAY_URL=http://api-gateway:8089
      - RUST_LOG=info
    depends_on:
      - postgres
      - api-gateway
    volumes:
      - ./lab_manager/storage:/usr/local/bin/storage
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  # ================================
  # MONITORING & OBSERVABILITY
  # ================================

  prometheus:
    image: prom/prometheus:latest
    container_name: tracseq-prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    networks:
      - tracseq_microservices_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: tracseq-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - tracseq_microservices_network
    restart: unless-stopped
