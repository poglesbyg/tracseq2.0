version: '3.8'

# TracSeq 2.0 Testing Environment
# Lightweight setup for running E2E and integration tests

networks:
  test_network:
    driver: bridge

volumes:
  test_postgres_data:
  test_redis_data:
  test_ollama_data:

services:
  # Test Database
  test-postgres:
    image: postgres:15-alpine
    container_name: tracseq-test-postgres
    environment:
      POSTGRES_DB: lab_manager_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"  # Different port to avoid conflicts
    networks:
      - test_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d lab_manager_test"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Test Redis
  test-redis:
    image: redis:7-alpine
    container_name: tracseq-test-redis
    command: redis-server --appendonly yes
    volumes:
      - test_redis_data:/data
    ports:
      - "6382:6379"  # Different port to avoid conflicts
    networks:
      - test_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  # Test Ollama (optional for AI tests)
  test-ollama:
    image: ollama/ollama:latest
    container_name: tracseq-test-ollama
    volumes:
      - test_ollama_data:/root/.ollama
    ports:
      - "11435:11434"  # Different port to avoid conflicts
    networks:
      - test_network
    restart: unless-stopped

  # Test Lab Manager Backend
  test-lab-manager:
    build:
      context: ./lab_manager
      dockerfile: Dockerfile.test
    container_name: tracseq-test-lab-manager
    ports:
      - "3001:3000"  # Different port to avoid conflicts
    environment:
      - PORT=3000
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://postgres:postgres@test-postgres:5432/lab_manager_test
      - JWT_SECRET=test-jwt-secret
      - STORAGE_PATH=/usr/local/bin/storage
      - RAG_SERVICE_URL=http://test-rag:8000
      - RUST_LOG=debug
      - SQLX_OFFLINE=false
      - TEST_MODE=true
    depends_on:
      test-postgres:
        condition: service_healthy
    networks:
      - test_network
    restart: unless-stopped

  # Test RAG Service
  test-rag:
    build:
      context: ./lab_submission_rag
      dockerfile: Dockerfile
    container_name: tracseq-test-rag
    ports:
      - "8001:8000"  # Different port to avoid conflicts
    environment:
      - PORT=8000
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@test-postgres:5432/lab_manager_test
      - OLLAMA_BASE_URL=http://test-ollama:11434
      - OLLAMA_MODEL=llama3.2:3b
      - PYTHONUNBUFFERED=1
      - TEST_MODE=true
    depends_on:
      test-postgres:
        condition: service_healthy
      test-ollama:
        condition: service_started
    volumes:
      - ./lab_submission_rag/uploads:/app/uploads
      - ./lab_submission_rag/exports:/app/exports
    networks:
      - test_network
    restart: unless-stopped

  # Test API Gateway
  test-api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile.simple
    container_name: tracseq-test-api-gateway
    ports:
      - "8090:8000"  # Different port to avoid conflicts
    environment:
      - ENVIRONMENT=test
      - HOST=0.0.0.0
      - PORT=8000
      - MONOLITH__HOST=test-lab-manager
      - MONOLITH__PORT=3000
      - USE_AUTH_SERVICE=false
      - USE_SAMPLE_SERVICE=false
      - USE_TEMPLATE_SERVICE=true
      - USE_STORAGE_SERVICE=false
      - USE_SEQUENCING_SERVICE=false
      - USE_NOTIFICATION_SERVICE=false
      - USE_RAG_SERVICE=false
      - REQUEST_TIMEOUT=30
      - MAX_CONCURRENT_REQUESTS=1000
      - CORS__ENABLED=true
      - CORS__ALLOW_ORIGINS=["http://localhost:3000","http://localhost:5173","http://localhost:5176","http://localhost:8000"]
      - MONITORING__METRICS_ENABLED=true
      - MONITORING__LOG_REQUESTS=true
    depends_on:
      - test-lab-manager
    networks:
      - test_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Test Frontend (optional - for full E2E testing)
  test-frontend:
    build:
      context: ./lab_manager/frontend
      dockerfile: Dockerfile.test
    container_name: tracseq-test-frontend
    ports:
      - "5177:5173"  # Different port to avoid conflicts
    environment:
      - NODE_ENV=test
      - VITE_API_URL=http://test-api-gateway:8000
      - VITE_BACKEND_URL=http://test-lab-manager:3000
    volumes:
      - ./lab_manager/frontend:/app
      - /app/node_modules
    depends_on:
      - test-api-gateway
      - test-lab-manager
    networks:
      - test_network
    restart: unless-stopped

  # Test Runner (runs tests and exits)
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test-runner
    container_name: tracseq-test-runner
    environment:
      - API_GATEWAY_URL=http://test-api-gateway:8000
      - BACKEND_URL=http://test-lab-manager:3000
      - BASE_URL=http://test-frontend:5173
      - DATABASE_URL=postgresql://postgres:postgres@test-postgres:5432/lab_manager_test
      - CI=true
    depends_on:
      test-postgres:
        condition: service_healthy
      test-lab-manager:
        condition: service_started
      test-api-gateway:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/target
      - /app/node_modules
    networks:
      - test_network
    profiles:
      - test  # Only start when specifically requested 