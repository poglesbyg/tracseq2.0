# Apache configuration for Lab Manager with Shibboleth Integration
# This configuration assumes Apache 2.4+ with mod_ssl, mod_rewrite, mod_proxy, and mod_shib2

<VirtualHost *:80>
    ServerName lab-manager.example.edu
    DocumentRoot /var/www/lab-manager
    
    # Redirect HTTP to HTTPS
    RewriteEngine On
    RewriteCond %{HTTPS} off
    RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
</VirtualHost>

<VirtualHost *:443>
    ServerName lab-manager.example.edu
    DocumentRoot /var/www/lab-manager
    
    # SSL Configuration
    SSLEngine on
    SSLCertificateFile /etc/ssl/certs/lab-manager.crt
    SSLCertificateKeyFile /etc/ssl/private/lab-manager.key
    SSLCertificateChainFile /etc/ssl/certs/ca-bundle.crt
    
    # Modern SSL settings
    SSLProtocol TLSv1.2 TLSv1.3
    SSLCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256
    SSLHonorCipherOrder on
    
    # Security headers
    Header always set X-Frame-Options "SAMEORIGIN"
    Header always set X-Content-Type-Options "nosniff"
    Header always set X-XSS-Protection "1; mode=block"
    Header always set Referrer-Policy "strict-origin-when-cross-origin"
    Header always set Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:; font-src 'self'; connect-src 'self'; frame-ancestors 'self';"
    
    # Logging
    ErrorLog /var/log/apache2/lab-manager-error.log
    CustomLog /var/log/apache2/lab-manager-access.log combined
    
    # Enable Shibboleth for the entire site
    ShibCompatValidUser On
    
    # Shibboleth SP configuration
    # Make sure mod_shib2 is loaded and configured
    
    # Protect specific API routes with Shibboleth
    <Location /api/protected>
        AuthType shibboleth
        ShibRequestSetting requireSession 1
        ShibUseHeaders On
        require valid-user
        
        # Optional: Require specific attributes
        # require shib-attr eduPersonAffiliation ~ ^(faculty|staff|student)$
        # require shib-attr isMemberOf "cn=lab-users,ou=groups,dc=example,dc=edu"
        
        # Proxy to backend with Shibboleth attributes
        ProxyPreserveHost On
        ProxyPass http://localhost:3000/api/protected
        ProxyPassReverse http://localhost:3000/api/protected
        
        # Pass Shibboleth attributes as HTTP headers
        RequestHeader set HTTP_EPPN %{EPPN}e
        RequestHeader set HTTP_MAIL %{MAIL}e
        RequestHeader set HTTP_DISPLAYNAME %{DISPLAYNAME}e
        RequestHeader set HTTP_GIVENNAME %{GIVENNAME}e
        RequestHeader set HTTP_SN %{SN}e
        RequestHeader set HTTP_AFFILIATION %{AFFILIATION}e
        RequestHeader set HTTP_ENTITLEMENT %{ENTITLEMENT}e
        RequestHeader set HTTP_ISMEMBEROF %{ISMEMBEROF}e
        
        # Custom lab-specific attributes (if configured)
        RequestHeader set HTTP_LAB_ROLE %{LAB_ROLE}e
        RequestHeader set HTTP_DEPARTMENT %{DEPARTMENT}e
        RequestHeader set HTTP_INSTITUTION %{INSTITUTION}e
    </Location>
    
    # Hybrid authentication for regular API routes
    <Location /api>
        # Allow both Shibboleth and JWT authentication
        # Shibboleth attributes will be available if user is authenticated via Shibboleth
        ShibUseHeaders On
        
        # Proxy to backend
        ProxyPreserveHost On
        ProxyPass http://localhost:3000/api
        ProxyPassReverse http://localhost:3000/api
        
        # Pass Shibboleth attributes if available (no authentication required)
        RequestHeader set HTTP_EPPN %{EPPN}e env=EPPN
        RequestHeader set HTTP_MAIL %{MAIL}e env=MAIL
        RequestHeader set HTTP_DISPLAYNAME %{DISPLAYNAME}e env=DISPLAYNAME
        RequestHeader set HTTP_GIVENNAME %{GIVENNAME}e env=GIVENNAME
        RequestHeader set HTTP_SN %{SN}e env=SN
        RequestHeader set HTTP_AFFILIATION %{AFFILIATION}e env=AFFILIATION
        RequestHeader set HTTP_ENTITLEMENT %{ENTITLEMENT}e env=ENTITLEMENT
        RequestHeader set HTTP_ISMEMBEROF %{ISMEMBEROF}e env=ISMEMBEROF
        RequestHeader set HTTP_LAB_ROLE %{LAB_ROLE}e env=LAB_ROLE
        RequestHeader set HTTP_DEPARTMENT %{DEPARTMENT}e env=DEPARTMENT
        RequestHeader set HTTP_INSTITUTION %{INSTITUTION}e env=INSTITUTION
    </Location>
    
    # Shibboleth login endpoint
    <Location /shibboleth-login>
        AuthType shibboleth
        ShibRequestSetting requireSession 1
        require valid-user
        
        # After successful authentication, redirect to dashboard
        RewriteEngine On
        RewriteRule ^.*$ /dashboard [R=302,L]
    </Location>
    
    # Shibboleth logout
    <Location /shibboleth-logout>
        # Custom logout handler that clears session and redirects
        RewriteEngine On
        RewriteRule ^.*$ /Shibboleth.sso/Logout?return=https://%{HTTP_HOST}/ [R=302,L]
    </Location>
    
    # Health check (no authentication required)
    <Location /health>
        ProxyPreserveHost On
        ProxyPass http://localhost:3000/health
        ProxyPassReverse http://localhost:3000/health
    </Location>
    
    # File upload endpoints
    <LocationMatch "^/api/(templates|samples)/upload">
        # Allow larger file uploads
        LimitRequestBody 104857600  # 100MB
        
        # Proxy to backend with Shibboleth attributes
        ProxyPreserveHost On
        ProxyPass http://localhost:3000
        ProxyPassReverse http://localhost:3000
        
        # Pass Shibboleth attributes
        RequestHeader set HTTP_EPPN %{EPPN}e env=EPPN
        RequestHeader set HTTP_MAIL %{MAIL}e env=MAIL
        RequestHeader set HTTP_DISPLAYNAME %{DISPLAYNAME}e env=DISPLAYNAME
        RequestHeader set HTTP_GIVENNAME %{GIVENNAME}e env=GIVENNAME
        RequestHeader set HTTP_SN %{SN}e env=SN
        RequestHeader set HTTP_AFFILIATION %{AFFILIATION}e env=AFFILIATION
        RequestHeader set HTTP_ENTITLEMENT %{ENTITLEMENT}e env=ENTITLEMENT
        RequestHeader set HTTP_ISMEMBEROF %{ISMEMBEROF}e env=ISMEMBEROF
        
        # Extended timeouts for file uploads
        ProxyTimeout 300
    </LocationMatch>
    
    # Serve static frontend files
    <Directory /var/www/lab-manager>
        Options -Indexes +FollowSymLinks
        AllowOverride None
        Require all granted
        
        # Handle React Router
        RewriteEngine On
        RewriteBase /
        RewriteRule ^index\.html$ - [L]
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteRule . /index.html [L]
        
        # Cache static assets
        <FilesMatch "\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$">
            ExpiresActive On
            ExpiresDefault "access plus 1 year"
            Header set Cache-Control "public, immutable"
        </FilesMatch>
    </Directory>
    
    # Prevent access to sensitive files
    <FilesMatch "\.(md|yml|yaml|json|lock|toml|env)$">
        Require all denied
    </FilesMatch>
    
    <DirectoryMatch "/\.">
        Require all denied
    </DirectoryMatch>
    
    # Shibboleth SP status and metadata (for administrators)
    <Location /Shibboleth.sso>
        SetHandler shib
        
        # Restrict access to status page
        <LocationMatch "Status$">
            # Only allow from specific IPs or require authentication
            Require ip 127.0.0.1
            Require ip 10.0.0.0/8
            # Or require valid-user for authenticated access
        </LocationMatch>
    </Location>
    
    # Optional: Attribute release testing endpoint
    <Location /shibboleth-test>
        AuthType shibboleth
        ShibRequestSetting requireSession 1
        require valid-user
        
        # Simple script to display attributes for testing
        Alias /shibboleth-test /var/www/lab-manager/shibboleth-test.php
    </Location>
    
</VirtualHost>

# Shibboleth SP Configuration Notes:
# 
# 1. Make sure shibboleth2.xml is properly configured with:
#    - ApplicationDefaults entityID for your SP
#    - Sessions configuration with appropriate timeouts
#    - SSO discovery service or specific IdP entityID
#    - AttributeExtractor and AttributeFilter configurations
#    - MetadataProvider for your federation or specific IdP
# 
# 2. Attribute mapping in attribute-map.xml should include:
#    - urn:oid:1.3.6.1.4.1.5923.1.1.1.6 (eduPersonPrincipalName) -> eppn
#    - urn:oid:0.9.2342.19200300.100.1.3 (mail) -> mail
#    - urn:oid:2.16.840.1.113730.3.1.241 (displayName) -> displayName
#    - urn:oid:2.5.4.42 (givenName) -> givenName
#    - urn:oid:2.5.4.4 (sn) -> sn
#    - urn:oid:1.3.6.1.4.1.5923.1.1.1.1 (eduPersonAffiliation) -> affiliation
#    - urn:oid:1.3.6.1.4.1.5923.1.1.1.7 (eduPersonEntitlement) -> entitlement
#    - urn:oid:1.3.6.1.4.1.5923.1.5.1.1 (isMemberOf) -> isMemberOf
# 
# 3. For lab-specific attributes, coordinate with your IdP administrator to:
#    - Define custom attributes (labRole, department, institution)
#    - Configure attribute release policies
#    - Update attribute-map.xml accordingly
# 
# 4. Consider security best practices:
#    - Use strong SSL/TLS configuration
#    - Implement proper session timeouts
#    - Configure attribute filters to only release necessary information
#    - Regular security updates for Shibboleth SP and Apache
# 
# 5. Testing recommendations:
#    - Use /Shibboleth.sso/Status to verify SP functionality
#    - Test attribute release with /shibboleth-test endpoint
#    - Verify both Shibboleth and JWT authentication work correctly
#    - Test session timeout and logout functionality 
