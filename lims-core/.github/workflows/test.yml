name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  SQLX_OFFLINE: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config postgresql-client
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Setup test databases
      env:
        PGPASSWORD: test_pass
      run: |
        # Create databases for each service that needs one
        psql -h localhost -U test_user -d test_db -c "CREATE DATABASE test_auth;"
        psql -h localhost -U test_user -d test_db -c "CREATE DATABASE test_sample;"
        psql -h localhost -U test_user -d test_db -c "CREATE DATABASE test_storage;"
        psql -h localhost -U test_user -d test_db -c "CREATE DATABASE test_reports;"
        # Add more as needed
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run tests
      env:
        TEST_DATABASE_URL: postgres://test_user:test_pass@localhost/test_db
        DATABASE_URL: postgres://test_user:test_pass@localhost/test_db
        REDIS_URL: redis://localhost:6379
      run: |
        cargo test --workspace --verbose -- --test-threads=1
    
    - name: Generate test report
      if: always()
      run: |
        cargo install cargo-tarpaulin
        cargo tarpaulin --workspace --out Xml --output-dir coverage
    
    - name: Upload coverage to Codecov
      if: always()
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config postgresql-client
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run integration tests
      env:
        TEST_DATABASE_URL: postgres://test_user:test_pass@localhost/test_db
        DATABASE_URL: postgres://test_user:test_pass@localhost/test_db
        REDIS_URL: redis://localhost:6379
      run: |
        # Run integration tests for each service
        cd lims-core/auth_service && cargo test --test '*' -- --test-threads=1
        cd ../sample_service && cargo test --test '*' -- --test-threads=1
        cd ../barcode_service && cargo test --test '*' -- --test-threads=1
        cd ../dashboard_service && cargo test --test '*' -- --test-threads=1
        cd ../reports_service && cargo test --test '*' -- --test-threads=1
        # Add more services as needed

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Run cargo audit
      run: |
        cargo install cargo-audit
        cargo audit

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: bench_user
          POSTGRES_PASSWORD: bench_pass
          POSTGRES_DB: bench_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config
    
    - name: Run benchmarks
      env:
        DATABASE_URL: postgres://bench_user:bench_pass@localhost/bench_db
      run: |
        cargo bench --workspace
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: target/criterion
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true