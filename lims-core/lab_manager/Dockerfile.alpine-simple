# syntax=docker/dockerfile:1

# Use Debian-based builder to avoid compatibility issues
FROM rust:bookworm as builder

WORKDIR /usr/src/app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    musl-tools \
    musl-dev \
    && rm -rf /var/lib/apt/lists/*

# Add musl target
RUN rustup target add x86_64-unknown-linux-musl

# Copy the source code
COPY . .

# Build with size optimizations for musl
ENV RUSTFLAGS="-C target-feature=+crt-static -C link-arg=-s"
RUN cargo build --release --target x86_64-unknown-linux-musl

# Runtime stage - minimal Alpine
FROM alpine:3.20

WORKDIR /app

# Install minimal runtime dependencies
RUN apk add --no-cache ca-certificates

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -S -D -H -u 1001 -h /app -s /sbin/nologin -G appgroup appuser

# Copy the static binary
COPY --from=builder /usr/src/app/target/x86_64-unknown-linux-musl/release/lab_manager ./lab_manager

# Copy migrations if they exist
COPY migrations ./migrations

# Create storage directory
RUN mkdir -p storage && chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Set environment variables
ENV RUST_LOG=info
ENV STORAGE_PATH=/app/storage

EXPOSE 3000

CMD ["./lab_manager"] 
