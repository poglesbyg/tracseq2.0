version: '3.8'

services:
  # Transaction Service
  transaction-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tracseq-transaction-service
    ports:
      - "8088:8088"
    environment:
      # Service Configuration
      PORT: 8088
      RUST_LOG: info
      RUST_BACKTRACE: 1
      
      # Database Configuration
      DATABASE_URL: postgresql://tracseq_transaction:tracseq_password@transaction-db:5432/tracseq_transactions
      DB_MAX_CONNECTIONS: 20
      DB_MIN_CONNECTIONS: 5
      DB_CONNECTION_TIMEOUT_SECONDS: 30
      
      # Transaction Configuration
      MAX_CONCURRENT_SAGAS: 100
      DEFAULT_TIMEOUT_MS: 300000
      CLEANUP_AFTER_HOURS: 24
      
      # Service URLs
      EVENT_SERVICE_URL: http://event-service:8087
      RAG_SERVICE_URL: http://rag-service:8086
      LAB_MANAGER_URL: http://lab-manager:3000
      
      # Features
      ENABLE_EVENTS: true
      ENABLE_PERSISTENCE: true
      ENABLE_AI_DECISIONS: true
      AI_TIMEOUT_SECONDS: 30
      AI_CONFIDENCE_THRESHOLD: 0.8
      
      # Redis Configuration (optional)
      REDIS_URL: redis://transaction-redis:6379
      
    depends_on:
      - transaction-db
      - transaction-redis
      - event-service
    volumes:
      - ./logs:/app/logs
    networks:
      - tracseq-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # PostgreSQL Database for Transaction Service
  transaction-db:
    image: postgres:15-alpine
    container_name: tracseq-transaction-db
    environment:
      POSTGRES_DB: tracseq_transactions
      POSTGRES_USER: tracseq_transaction
      POSTGRES_PASSWORD: tracseq_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5435:5432"  # Different port to avoid conflicts
    volumes:
      - transaction_db_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d/
    networks:
      - tracseq-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tracseq_transaction -d tracseq_transactions"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for State Management (optional)
  transaction-redis:
    image: redis:7-alpine
    container_name: tracseq-transaction-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6381:6379"  # Different port to avoid conflicts
    volumes:
      - transaction_redis_data:/data
    networks:
      - tracseq-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Event Service (dependency)
  event-service:
    image: tracseq/event-service:latest
    container_name: tracseq-event-service
    ports:
      - "8087:8087"
    environment:
      PORT: 8087
      REDIS_URL: redis://event-redis:6379
      RUST_LOG: info
    networks:
      - tracseq-network
    restart: unless-stopped

  # Event Redis
  event-redis:
    image: redis:7-alpine
    container_name: tracseq-event-redis
    command: redis-server --appendonly yes
    ports:
      - "6380:6379"
    volumes:
      - event_redis_data:/data
    networks:
      - tracseq-network
    restart: unless-stopped

  # RAG Service (dependency - optional)
  rag-service:
    image: tracseq/rag-service:latest
    container_name: tracseq-rag-service
    ports:
      - "8086:8086"
    environment:
      PORT: 8086
      PYTHON_ENV: production
    networks:
      - tracseq-network
    restart: unless-stopped

  # Monitoring & Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: tracseq-transaction-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - tracseq-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: tracseq-transaction-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - tracseq-network
    restart: unless-stopped

# Networks
networks:
  tracseq-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  transaction_db_data:
    driver: local
  transaction_redis_data:
    driver: local
  event_redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local 
