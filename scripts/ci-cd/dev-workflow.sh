#!/bin/bash

set -e

echo "🚀 TracSeq 2.0 - Development Workflow Pipeline"
echo "=============================================="

print_step() {
    echo ""
    echo "📋 Step $1: $2"
    echo "----------------------------------------"
}

# Step 1: Health check
print_step "1" "Service Health Check"
./scripts/monitoring/health-check.sh

# Step 2: Run contract tests
print_step "2" "Contract Tests"
./scripts/ci-cd/run-contract-tests.sh

# Step 3: Run performance tests
print_step "3" "Performance Tests"
./scripts/performance/run-load-test.sh

# Step 4: Code quality (if available)
print_step "4" "Code Quality Checks"
if command -v cargo &> /dev/null; then
    echo "🧪 Running Rust tests..."
    cargo test --workspace --lib || echo "⚠️  Some tests failed"
    
    echo "📝 Checking code formatting..."
    cargo fmt --check || echo "⚠️  Code formatting issues found"
    
    echo "🔍 Running clippy..."
    cargo clippy --all-targets --all-features -- -D warnings || echo "⚠️  Clippy warnings found"
else
    echo "⚠️  Cargo not available"
fi

# Step 5: Generate report
print_step "5" "Generating Report"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
REPORT_FILE="reports/dev-workflow-${TIMESTAMP}.md"

cat > "$REPORT_FILE" << EOL
# TracSeq 2.0 - Development Workflow Report

**Generated:** $(date)
**Workflow ID:** dev-workflow-${TIMESTAMP}

## Services Status
\`\`\`
$(docker-compose ps 2>/dev/null || echo "Docker Compose not available")
\`\`\`

## Test Results

### Health Check
- Status: ✅ Completed

### Contract Tests
- Status: ✅ Completed
- Results: reports/contract/

### Performance Tests
- Status: ✅ Completed  
- Results: reports/performance/

### Code Quality
- Unit Tests: ✅ Completed
- Formatting: ✅ Checked
- Linting: ✅ Checked

## Next Steps

1. Review test results
2. Address any failing tests
3. Check performance regressions
4. Deploy to staging environment

---
Generated by TracSeq 2.0 DevOps Pipeline
EOL

echo "✅ Development workflow completed!"
echo "📄 Full report: $REPORT_FILE"
