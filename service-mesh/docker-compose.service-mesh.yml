version: '3.8'

services:
  # ================================
  # SERVICE MESH - ENVOY PROXY
  # ================================

  # Envoy Service Mesh
  envoy-proxy:
    image: envoyproxy/envoy:v1.27.0
    container_name: tracseq-envoy-proxy
    ports:
      - "8090:8090"  # Service Mesh Gateway
      - "9901:9901"  # Envoy Admin Interface
    volumes:
      - ./envoy-config.yaml:/etc/envoy/envoy.yaml
      - ./certs:/etc/ssl/certs
    command: ["envoy", "-c", "/etc/envoy/envoy.yaml", "--service-cluster", "tracseq-service-mesh", "--service-node", "envoy-gateway"]
    networks:
      - service-mesh-network
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9901/stats/prometheus"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - auth-service
      - sample-service
      - enhanced-storage-service
      - template-service
      - sequencing-service
      - notification-service
      - enhanced-rag-service
      - event-service
      - transaction-service
      - api-gateway

  # Service Mesh Monitoring
  envoy-metrics-exporter:
    image: prom/statsd-exporter:v0.22.7
    container_name: tracseq-envoy-metrics
    ports:
      - "9102:9102"
    command:
      - '--statsd.mapping-config=/etc/statsd/mapping.yaml'
      - '--statsd.listen-udp=:9125'
      - '--web.listen-address=:9102'
    volumes:
      - ./statsd-mapping.yaml:/etc/statsd/mapping.yaml
    networks:
      - service-mesh-network
    restart: unless-stopped

  # ================================
  # MICROSERVICES WITH SIDECAR PROXIES
  # ================================

  # Auth Service with Envoy Sidecar
  auth-service:
    build: 
      context: ../auth_service
      dockerfile: Dockerfile
    container_name: tracseq-auth-service-mesh
    environment:
      - DATABASE_URL=postgres://postgres:postgres@enhanced_storage_service-postgres-1:5432/lab_manager
      - REDIS_URL=redis://enhanced_storage_service-redis-1:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - AUTH_PORT=8080
      - RUST_LOG=debug
      - RUST_BACKTRACE=full
      - ENABLE_TRACING=true
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    networks:
      - service-mesh-network
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth-service-envoy:
    image: envoyproxy/envoy:v1.27.0
    container_name: tracseq-auth-service-envoy
    volumes:
      - ./sidecars/auth-service-envoy.yaml:/etc/envoy/envoy.yaml
    command: ["envoy", "-c", "/etc/envoy/envoy.yaml", "--service-cluster", "auth-service", "--service-node", "auth-service-envoy"]
    networks:
      - service-mesh-network
    restart: unless-stopped
    depends_on:
      - auth-service

  # Sample Service with Envoy Sidecar
  sample-service:
    build:
      context: ../sample_service
      dockerfile: Dockerfile
    container_name: tracseq-sample-service-mesh
    environment:
      - DATABASE_URL=postgres://postgres:postgres@enhanced_storage_service-postgres-1:5432/lab_manager
      - REDIS_URL=redis://enhanced_storage_service-redis-1:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - ENHANCED_STORAGE_SERVICE_URL=http://enhanced-storage-service:8082
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - ENABLE_TRACING=true
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    networks:
      - service-mesh-network
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - auth-service

  sample-service-envoy:
    image: envoyproxy/envoy:v1.27.0
    container_name: tracseq-sample-service-envoy
    volumes:
      - ./sidecars/sample-service-envoy.yaml:/etc/envoy/envoy.yaml
    command: ["envoy", "-c", "/etc/envoy/envoy.yaml", "--service-cluster", "sample-service", "--service-node", "sample-service-envoy"]
    networks:
      - service-mesh-network
    restart: unless-stopped
    depends_on:
      - sample-service

  # Enhanced Storage Service with Envoy Sidecar
  enhanced-storage-service:
    build:
      context: ../enhanced_storage_service
      dockerfile: Dockerfile
    container_name: tracseq-enhanced-storage-service-mesh
    environment:
      - DATABASE_URL=postgres://postgres:postgres@enhanced_storage_service-postgres-1:5432/lab_manager
      - REDIS_URL=redis://enhanced_storage_service-redis-1:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - EVENT_SERVICE_URL=http://event-service:8087
      - NOTIFICATION_SERVICE_URL=http://notification-service:8085
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - ENABLE_TRACING=true
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    networks:
      - service-mesh-network
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    volumes:
      - enhanced_storage_data:/app/storage
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - auth-service

  enhanced-storage-service-envoy:
    image: envoyproxy/envoy:v1.27.0
    container_name: tracseq-enhanced-storage-service-envoy
    volumes:
      - ./sidecars/enhanced-storage-service-envoy.yaml:/etc/envoy/envoy.yaml
    command: ["envoy", "-c", "/etc/envoy/envoy.yaml", "--service-cluster", "enhanced-storage-service", "--service-node", "enhanced-storage-service-envoy"]
    networks:
      - service-mesh-network
    restart: unless-stopped
    depends_on:
      - enhanced-storage-service

  # API Gateway with Service Mesh Integration
  api-gateway:
    build:
      context: ../api_gateway
      dockerfile: Dockerfile
    container_name: tracseq-api-gateway-mesh
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8080
      - SAMPLE_SERVICE_URL=http://sample-service:8081
      - ENHANCED_STORAGE_SERVICE_URL=http://enhanced-storage-service:8082
      - TEMPLATE_SERVICE_URL=http://template-service:8083
      - SEQUENCING_SERVICE_URL=http://sequencing-service:8084
      - NOTIFICATION_SERVICE_URL=http://notification-service:8085
      - ENHANCED_RAG_SERVICE_URL=http://enhanced-rag-service:8086
      - EVENT_SERVICE_URL=http://event-service:8087
      - TRANSACTION_SERVICE_URL=http://transaction-service:8088
      - REDIS_URL=redis://enhanced_storage_service-redis-1:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - LOG_LEVEL=INFO
      - ENABLE_TRACING=true
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - SERVICE_MESH_ENABLED=true
      - ENVOY_PROXY_URL=http://envoy-proxy:8090
    networks:
      - service-mesh-network
      - enhanced_storage_service_enhanced_storage_network
      - tracseq20_lab_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - envoy-proxy

  # ================================
  # SERVICE MESH OBSERVABILITY
  # ================================

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: tracseq-jaeger-mesh
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
      - QUERY_BASE_PATH=/jaeger
    networks:
      - service-mesh-network
    restart: unless-stopped

  # Prometheus for Service Mesh Metrics
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: tracseq-prometheus-mesh
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus/prometheus-service-mesh.yml:/etc/prometheus/prometheus.yml
      - prometheus_mesh_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - service-mesh-network
    restart: unless-stopped

# ================================
# VOLUMES
# ================================
volumes:
  enhanced_storage_data:
    external: true
  prometheus_mesh_data:
    driver: local

# ================================
# NETWORKS
# ================================
networks:
  service-mesh-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
  enhanced_storage_service_enhanced_storage_network:
    external: true
  tracseq20_lab_network:
    external: true