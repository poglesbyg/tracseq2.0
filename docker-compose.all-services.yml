version: '3.8'

# TracSeq 2.0 Complete Microservices Architecture
# Comprehensive build and orchestration for all services

networks:
  tracseq_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

services:
  # ================================
  # INFRASTRUCTURE SERVICES
  # ================================
  
  postgres:
    image: postgres:15-alpine
    container_name: tracseq-postgres
    environment:
      POSTGRES_DB: tracseq_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: "lab_manager,enhanced_storage,auth,samples"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/01-init-databases.sql
    ports:
      - "5432:5432"
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tracseq_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: tracseq-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  ollama:
    image: ollama/ollama:latest
    container_name: tracseq-ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - tracseq_network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================
  # TIER 1: FOUNDATIONAL SERVICES
  # ================================

  config-service:
    build:
      context: ./config-service
      dockerfile: Dockerfile
      args:
        RUST_VERSION: "1.75"
    image: tracseq-config-service:latest
    container_name: tracseq-config-service
    ports:
      - "8091:8091"
    environment:
      - PORT=8091
      - RUST_LOG=info
      - RUST_BACKTRACE=1
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  auth-service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
      cache_from:
        - tracseq-auth-service:latest
    image: tracseq-auth-service:latest
    container_name: tracseq-auth-service
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-tracseq-jwt-secret-change-in-production}
      - RUST_LOG=info
      - RUST_BACKTRACE=1
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      config-service:
        condition: service_healthy

  event-service:
    build:
      context: ./event_service
      dockerfile: Dockerfile
    image: tracseq-event-service:latest
    container_name: tracseq-event-service
    ports:
      - "8087:8087"
    environment:
      - PORT=8087
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - REDIS_URL=redis://redis:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RUST_LOG=info
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      auth-service:
        condition: service_healthy

  # ================================
  # TIER 2: CORE BUSINESS SERVICES
  # ================================

  sample-service:
    build:
      context: ./sample_service
      dockerfile: Dockerfile
    image: tracseq-sample-service:latest
    container_name: tracseq-sample-service
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - AUTH_SERVICE_URL=http://auth-service:8080
      - EVENT_SERVICE_URL=http://event-service:8087
      - RUST_LOG=info
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      auth-service:
        condition: service_healthy
      event-service:
        condition: service_healthy

  enhanced-storage-service:
    build:
      context: ./enhanced_storage_service
      dockerfile: Dockerfile
    image: tracseq-enhanced-storage-service:latest
    container_name: tracseq-enhanced-storage-service
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - REDIS_URL=redis://redis:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - EVENT_SERVICE_URL=http://event-service:8087
      - RUST_LOG=info
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      auth-service:
        condition: service_healthy
      event-service:
        condition: service_healthy

  template-service:
    build:
      context: ./template_service
      dockerfile: Dockerfile
    image: tracseq-template-service:latest
    container_name: tracseq-template-service
    ports:
      - "8083:8083"
    environment:
      - PORT=8083
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RUST_LOG=info
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      auth-service:
        condition: service_healthy

  sequencing-service:
    build:
      context: ./sequencing_service
      dockerfile: Dockerfile
    image: tracseq-sequencing-service:latest
    container_name: tracseq-sequencing-service
    ports:
      - "8084:8084"
    environment:
      - PORT=8084
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - AUTH_SERVICE_URL=http://auth-service:8080
      - SAMPLE_SERVICE_URL=http://sample-service:8081
      - EVENT_SERVICE_URL=http://event-service:8087
      - RUST_LOG=info
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      sample-service:
        condition: service_healthy

  notification-service:
    build:
      context: ./notification_service
      dockerfile: Dockerfile
    image: tracseq-notification-service:latest
    container_name: tracseq-notification-service
    ports:
      - "8085:8085"
    environment:
      - PORT=8085
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - REDIS_URL=redis://redis:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - EVENT_SERVICE_URL=http://event-service:8087
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - RUST_LOG=info
    networks:  
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      auth-service:
        condition: service_healthy
      event-service:
        condition: service_healthy

  transaction-service:
    build:
      context: ./transaction_service
      dockerfile: Dockerfile
    image: tracseq-transaction-service:latest
    container_name: tracseq-transaction-service
    ports:
      - "8088:8088"
    environment:
      - PORT=8088
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - REDIS_URL=redis://redis:6379
      - AUTH_SERVICE_URL=http://auth-service:8080
      - EVENT_SERVICE_URL=http://event-service:8087
      - RUST_LOG=info
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      auth-service:
        condition: service_healthy
      event-service:
        condition: service_healthy

  # ================================
  # TIER 3: SPECIALIZED SERVICES
  # ================================

  library-details-service:
    build:
      context: ./library_details_service
      dockerfile: Dockerfile
    image: tracseq-library-details-service:latest
    container_name: tracseq-library-details-service
    ports:
      - "8092:8092"
    environment:
      - PORT=8092
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RUST_LOG=info
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8092/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      auth-service:
        condition: service_healthy

  qaqc-service:
    build:
      context: ./qaqc_service
      dockerfile: Dockerfile
    image: tracseq-qaqc-service:latest
    container_name: tracseq-qaqc-service
    ports:
      - "8093:8093"
    environment:
      - PORT=8093
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RUST_LOG=info
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8093/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      auth-service:
        condition: service_healthy

  spreadsheet-versioning-service:
    build:
      context: ./spreadsheet_versioning_service
      dockerfile: Dockerfile
    image: tracseq-spreadsheet-versioning-service:latest
    container_name: tracseq-spreadsheet-versioning-service
    ports:
      - "8094:8094"
    environment:
      - PORT=8094
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RUST_LOG=info
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8094/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      auth-service:
        condition: service_healthy

  # ================================
  # TIER 4: AI/ML SERVICES
  # ================================

  enhanced-rag-service:
    build:
      context: ./enhanced_rag_service
      dockerfile: Dockerfile
    image: tracseq-enhanced-rag-service:latest
    container_name: tracseq-enhanced-rag-service
    ports:
      - "8086:8086"
    environment:
      - PORT=8086
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/tracseq_db
      - REDIS_URL=redis://redis:6379
      - OLLAMA_BASE_URL=http://ollama:11434
      - PYTHONUNBUFFERED=1
      - PYTHONOPTIMIZE=1
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy

  lab-submission-rag:
    build:
      context: ./lab_submission_rag
      dockerfile: Dockerfile
      target: production
    image: tracseq-lab-submission-rag:latest
    container_name: tracseq-lab-submission-rag
    ports:
      - "8095:8095"
    environment:
      - PORT=8095
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/tracseq_db
      - REDIS_URL=redis://redis:6379
      - OLLAMA_BASE_URL=http://ollama:11434
      - PYTHONUNBUFFERED=1
    networks:
      - tracseq_network
    restart: unless-stopped
    volumes:
      - ./lab_submission_rag/uploads:/app/uploads:rw
      - ./lab_submission_rag/exports:/app/exports:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8095/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      enhanced-rag-service:
        condition: service_healthy

  # ================================
  # TIER 5: GATEWAY & ORCHESTRATION
  # ================================

  api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    image: tracseq-api-gateway:latest
    container_name: tracseq-api-gateway
    ports:
      - "8089:8089"
    environment:
      - PORT=8089
      - AUTH_SERVICE_URL=http://auth-service:8080
      - SAMPLE_SERVICE_URL=http://sample-service:8081
      - ENHANCED_STORAGE_SERVICE_URL=http://enhanced-storage-service:8082
      - TEMPLATE_SERVICE_URL=http://template-service:8083
      - SEQUENCING_SERVICE_URL=http://sequencing-service:8084
      - NOTIFICATION_SERVICE_URL=http://notification-service:8085
      - ENHANCED_RAG_SERVICE_URL=http://enhanced-rag-service:8086
      - EVENT_SERVICE_URL=http://event-service:8087
      - TRANSACTION_SERVICE_URL=http://transaction-service:8088
      - CONFIG_SERVICE_URL=http://config-service:8091
      - LIBRARY_DETAILS_SERVICE_URL=http://library-details-service:8092
      - QAQC_SERVICE_URL=http://qaqc-service:8093
      - SPREADSHEET_VERSIONING_SERVICE_URL=http://spreadsheet-versioning-service:8094
      - LAB_SUBMISSION_RAG_URL=http://lab-submission-rag:8095
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-tracseq-jwt-secret-change-in-production}
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      auth-service:
        condition: service_healthy
      sample-service:
        condition: service_healthy
      enhanced-storage-service: 
        condition: service_healthy
      template-service:
        condition: service_healthy
      sequencing-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      enhanced-rag-service:
        condition: service_healthy
      event-service:
        condition: service_healthy
      transaction-service:
        condition: service_healthy

  lab-manager:
    build:
      context: ./lab_manager
      dockerfile: Dockerfile
    image: tracseq-lab-manager:latest
    container_name: tracseq-lab-manager
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tracseq_db
      - API_GATEWAY_URL=http://api-gateway:8089
      - RUST_LOG=info
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      api-gateway:
        condition: service_healthy

  # ================================
  # MONITORING & OBSERVABILITY
  # ================================

  prometheus:
    image: prom/prometheus:latest
    container_name: tracseq-prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - tracseq_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: tracseq-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - tracseq_network
    restart: unless-stopped
    depends_on:
      - prometheus 
