# syntax=docker/dockerfile:1

# Build stage
FROM rust:alpine3.20 as builder

WORKDIR /usr/src/app

# Install build dependencies
RUN apk add --no-cache \
    musl-dev \
    pkgconfig \
    openssl-dev \
    openssl-libs-static

# Add musl target for static compilation
RUN rustup target add x86_64-unknown-linux-musl

# Copy dependency files first for better caching
COPY Cargo.toml Cargo.lock ./

# Create a stub main.rs to build dependencies
RUN mkdir -p src && echo "fn main() {}" > src/main.rs

# Build dependencies only (cached layer)
RUN cargo build --release --target x86_64-unknown-linux-musl
RUN rm -rf src

# Copy source code
COPY src ./src

# Build with size optimizations
ENV RUSTFLAGS="-C target-cpu=generic -C opt-level=s -C panic=abort -C codegen-units=1 -C strip=symbols"
RUN cargo build --release --target x86_64-unknown-linux-musl

# Runtime stage - minimal Alpine
FROM alpine:3.20

WORKDIR /app

# Install minimal runtime dependencies
RUN apk add --no-cache ca-certificates tzdata

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -S -D -H -u 1001 -h /app -s /sbin/nologin -G appgroup appuser

# Copy the binary
COPY --from=builder /usr/src/app/target/x86_64-unknown-linux-musl/release/lab_manager ./lab_manager

# Copy migrations if they exist
COPY migrations ./migrations

# Create storage directory
RUN mkdir -p storage && chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Set environment variables
ENV RUST_LOG=info
ENV STORAGE_PATH=/app/storage

EXPOSE 3000

CMD ["./lab_manager"] 
