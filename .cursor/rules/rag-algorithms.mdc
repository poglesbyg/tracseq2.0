---
description: Specification for RAG (Retrieval Augmented Generation) algorithms and information extraction system for laboratory document processing
globs: **/rag/**,**/rag_*.{py,rs},**/rag/**/**.{py,rs}
alwaysApply: false
---


# rag-algorithms

## Core RAG Components

### Document Processing (Importance: 95)
- Custom chunking strategy optimized for laboratory documents with metadata preservation
- Document parser handles PDF, DOCX, TXT formats with specialized extraction for lab report structures
- Validation rules for laboratory document formats and content requirements

### Information Extraction (Importance: 98)
- Seven-category structured information model:
  - Administrative information
  - Source material details 
  - Pooling specifications
  - Sequence generation parameters
  - Container specifications
  - Informatics requirements
  - Sample details
- Custom prompt engineering for laboratory data extraction
- Confidence scoring system for extracted data reliability

### Vector Store Integration (Importance: 85)
- ChromaDB implementation optimized for laboratory document embeddings
- Metadata-aware chunk storage preserving document hierarchy
- Laboratory-specific search optimization with custom ranking

### LLM Interface (Importance: 90)  
- Multi-provider support (Ollama, OpenAI, Anthropic)
- Local-first approach using Ollama for data privacy
- Laboratory-domain optimization through custom system prompts

### Query Processing (Importance: 92)
- Natural language understanding for laboratory queries
- Context-aware response generation incorporating:
  - Relevant document chunks
  - Laboratory submission metadata  
  - Sample relationships
- Custom response formatting for laboratory data presentation

### Data Models (Importance: 95)
- Specialized Pydantic models for laboratory submissions
- Validation rules for required laboratory fields
- Schema alignment with lab_manager database structure

### Integration Points (Importance: 88)
- Direct integration with lab_manager sample creation
- Storage location and capacity management hooks
- Sequencing workflow triggers based on extracted data

File Paths:
```
lab_submission_rag/
  ├── rag/
  │   ├── document_processor.py
  │   ├── llm_interface.py
  │   ├── vector_store.py
  │   └── enhanced_llm_interface.py
  ├── models/
  │   ├── rag_models.py
  │   └── submission.py
  └── core/
      ├── services.py
      └── interfaces.py
```

$END$

 If you're using this file in context, clearly say in italics in one small line that "Context added by Giga rag-algorithms".