version: '3.8'

# TracSeq 2.0 Enhanced Architecture
# Standalone Frontend + Microservices + API Gateway

name: tracseq-enhanced

networks:
  tracseq_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  rag_storage:
  app_storage:

services:
  # ================================
  # FRONTEND APPLICATION (Standalone)
  # ================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    environment:
      - VITE_API_GATEWAY_URL=http://localhost:8089
      - VITE_API_BASE_URL=http://localhost:8089/api
      - VITE_WS_URL=ws://localhost:8089/ws
    depends_on:
      - api-gateway
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # API GATEWAY (Request Router)
  # ================================
  api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    ports:
      - "${API_GATEWAY_PORT:-8089}:8089"
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8080
      - SAMPLE_SERVICE_URL=http://sample-service:8081
      - STORAGE_SERVICE_URL=http://storage-service:8082
      - TEMPLATE_SERVICE_URL=http://template-service:8083
      - SEQUENCING_SERVICE_URL=http://sequencing-service:8084
      - NOTIFICATION_SERVICE_URL=http://notification-service:8085
      - RAG_SERVICE_URL=http://rag-service:8086
      - EVENT_SERVICE_URL=http://event-service:8087
      - TRANSACTION_SERVICE_URL=http://transaction-service:8088
    depends_on:
      - auth-service
      - sample-service
      - storage-service
    networks:
      - tracseq_network
    restart: unless-stopped

  # ================================
  # CORE MICROSERVICES
  # ================================
  auth-service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    ports:
      - "${AUTH_SERVICE_PORT:-8080}:8080"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/auth_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
    depends_on:
      - postgres
      - redis
    networks:
      - tracseq_network
    restart: unless-stopped

  sample-service:
    build:
      context: ./sample_service
      dockerfile: Dockerfile
    ports:
      - "${SAMPLE_SERVICE_PORT:-8081}:8081"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/sample_db
      - EVENT_SERVICE_URL=http://event-service:8087
    depends_on:
      - postgres
      - event-service
    networks:
      - tracseq_network
    restart: unless-stopped

  storage-service:
    build:
      context: ./enhanced_storage_service
      dockerfile: Dockerfile
    ports:
      - "${STORAGE_SERVICE_PORT:-8082}:8082"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/storage_db
      - EVENT_SERVICE_URL=http://event-service:8087
    depends_on:
      - postgres
      - event-service
    networks:
      - tracseq_network
    restart: unless-stopped

  template-service:
    build:
      context: ./template_service
      dockerfile: Dockerfile
    ports:
      - "${TEMPLATE_SERVICE_PORT:-8083}:8083"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/template_db
    depends_on:
      - postgres
    networks:
      - tracseq_network
    restart: unless-stopped

  sequencing-service:
    build:
      context: ./sequencing_service
      dockerfile: Dockerfile
    ports:
      - "${SEQUENCING_SERVICE_PORT:-8084}:8084"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/sequencing_db
    depends_on:
      - postgres
    networks:
      - tracseq_network
    restart: unless-stopped

  notification-service:
    build:
      context: ./notification_service
      dockerfile: Dockerfile
    ports:
      - "${NOTIFICATION_SERVICE_PORT:-8085}:8085"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/notification_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tracseq_network
    restart: unless-stopped

  rag-service:
    build:
      context: ./lab_submission_rag
      dockerfile: Dockerfile
    ports:
      - "${RAG_SERVICE_PORT:-8086}:8000"
    environment:
      - POSTGRES_URL=postgres://postgres:postgres@postgres:5432/rag_db
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL:-llama3.2:3b}
    depends_on:
      - postgres
      - ollama
    networks:
      - tracseq_network
    volumes:
      - rag_storage:/app/uploads
    restart: unless-stopped

  event-service:
    build:
      context: ./event_service
      dockerfile: Dockerfile
    ports:
      - "${EVENT_SERVICE_PORT:-8087}:8087"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    networks:
      - tracseq_network
    restart: unless-stopped

  transaction-service:
    build:
      context: ./transaction_service
      dockerfile: Dockerfile
    ports:
      - "${TRANSACTION_SERVICE_PORT:-8088}:8088"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/transaction_db
      - EVENT_SERVICE_URL=http://event-service:8087
    depends_on:
      - postgres
      - event-service
    networks:
      - tracseq_network
    restart: unless-stopped

  # ================================
  # INFRASTRUCTURE SERVICES
  # ================================
  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    environment:
      - POSTGRES_DB=tracseq
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=auth_db,sample_db,storage_db,template_db,sequencing_db,notification_db,rag_db,transaction_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tracseq"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - tracseq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  ollama:
    image: ollama/ollama:latest
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - tracseq_network
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s 