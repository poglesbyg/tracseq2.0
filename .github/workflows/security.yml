# TracSeq 2.0 Security Scanning Pipeline
name: 🔒 Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly scan on Sundays
  workflow_dispatch:

env:
  RUST_VERSION: '1.75'
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # 🔍 Dependency Security Scan
  dependency-scan:
    name: 🔍 Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Rust dependency audit
      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Audit Rust dependencies
        run: |
          echo "🔍 Auditing Rust dependencies..."
          cargo audit

      # Python dependency scan
      - name: Install Python security tools
        run: |
          pip install safety bandit

      - name: Scan Python dependencies
        run: |
          echo "🔍 Scanning Python dependencies..."
          # Check API Gateway
          if [ -f "lims-core/api_gateway/requirements.txt" ]; then
            safety check -r lims-core/api_gateway/requirements.txt || true
          fi
          
          # Check AI services
          for service in lims-ai/*/; do
            if [ -f "$service/requirements.txt" ]; then
              echo "Checking $service"
              safety check -r "$service/requirements.txt" || true
            fi
          done

      # Node.js dependency audit
      - name: Audit npm dependencies
        working-directory: lims-ui
        run: |
          echo "🔍 Auditing npm dependencies..."
          npm audit --audit-level=moderate || true

  # � Python Code Security
  python-security:
    name: � Python Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit security scan
        run: |
          echo "🔍 Running Bandit security scan..."
          
          # Scan API Gateway
          if [ -d "lims-core/api_gateway" ]; then
            bandit -r lims-core/api_gateway -f json -o api-gateway-bandit.json || true
          fi
          
          # Scan AI services
          if [ -d "lims-ai" ]; then
            bandit -r lims-ai -f json -o ai-services-bandit.json || true
          fi

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-results
          path: |
            *-bandit.json

  # 🦀 Rust Security
  rust-security:
    name: 🦀 Rust Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Check advisories, licenses, and sources
        run: |
          echo "🔍 Running cargo-deny checks..."
          cargo deny check advisories || true
          cargo deny check licenses || true

  # � SAST with CodeQL
  codeql-analysis:
    name: � CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]
    
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # 🐳 Container Security
  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'repo'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # � Secrets Scanning
  secret-scan:
    name: � Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 📊 Security Summary
  security-summary:
    name: 📊 Security Summary
    needs: [dependency-scan, python-security, rust-security, codeql-analysis, container-scan, secret-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Security scan summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Scan Results:" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Security | ${{ needs.python-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Rust Security | ${{ needs.rust-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Scan | ${{ needs.container-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          
          # Check overall status
          if [ "${{ needs.dependency-scan.result }}" == "failure" ] || \
             [ "${{ needs.python-security.result }}" == "failure" ] || \
             [ "${{ needs.rust-security.result }}" == "failure" ] || \
             [ "${{ needs.secret-scan.result }}" == "failure" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Security issues detected. Please review the scan results.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All security scans completed.**" >> $GITHUB_STEP_SUMMARY
          fi
