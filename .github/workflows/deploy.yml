# TracSeq 2.0 Laboratory Management System - Deployment Pipeline
name: 🚀 TracSeq 2.0 Deploy

on:
  push:
    branches: [ "main", "master" ]
    tags: [ "v*" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production
      deployment_mode:
        description: 'Deployment mode'
        required: true
        default: 'full-stack'
        type: choice
        options:
        - full-stack
        - backend-only
        - frontend-only
        - ai-services-only
      skip_tests:
        description: 'Skip pre-deployment tests'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/tracseq
  NODE_VERSION: '20'
  PNPM_VERSION: '10.12.2'
  RUST_VERSION: '1.75'
  PYTHON_VERSION: '3.11'

jobs:
  # 🔍 Pre-deployment validation
  pre-deploy:
    name: 🔍 Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      environment: ${{ steps.check.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
      services_matrix: ${{ steps.services.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine deployment parameters
        id: check
        run: |
          SHOULD_DEPLOY="false"
          ENVIRONMENT="staging"
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SHOULD_DEPLOY="true"
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            SHOULD_DEPLOY="true"
            ENVIRONMENT="staging"
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v.* ]]; then
            SHOULD_DEPLOY="true"
            ENVIRONMENT="production"
          fi
          
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/v.* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="${{ github.sha }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📌 Version: $VERSION"

      - name: Build services matrix
        id: services
        run: |
          # Define all services with their metadata
          SERVICES_JSON=$(cat << 'EOF'
          {
            "include": [
              {
                "name": "auth-service",
                "path": "lims-core/auth_service",
                "type": "rust",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "sample-service",
                "path": "lims-core/sample_service",
                "type": "rust",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "enhanced-storage-service",
                "path": "lims-core/enhanced_storage_service",
                "type": "rust",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "event-service",
                "path": "lims-core/event_service",
                "type": "rust",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "notification-service",
                "path": "lims-core/notification_service",
                "type": "rust",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "transaction-service",
                "path": "lims-core/transaction_service",
                "type": "rust",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "sequencing-service",
                "path": "lims-core/sequencing_service",
                "type": "rust",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "qaqc-service",
                "path": "lims-core/qaqc_service",
                "type": "rust",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "template-service",
                "path": "lims-core/template_service",
                "type": "rust",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "spreadsheet-versioning-service",
                "path": "lims-core/spreadsheet_versioning_service",
                "type": "rust",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "library-details-service",
                "path": "lims-core/library_details_service",
                "type": "rust",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "dashboard-service",
                "path": "lims-core/dashboard_service",
                "type": "rust",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "reports-service",
                "path": "lims-core/reports_service",
                "type": "rust",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "cognitive-assistant-service",
                "path": "lims-core/cognitive_assistant_service",
                "type": "rust",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "barcode-service",
                "path": "lims-core/barcode_service",
                "type": "rust",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "api-gateway",
                "path": "lims-core/api_gateway",
                "type": "python",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "lab-submission-rag",
                "path": "lims-ai/lab_submission_rag",
                "type": "python",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "enhanced-rag-service",
                "path": "lims-ai/enhanced_rag_service",
                "type": "python",
                "dockerfile": "Dockerfile"
              },
              {
                "name": "frontend",
                "path": "lims-ui",
                "type": "frontend",
                "dockerfile": "Dockerfile"
              }
            ]
          }
          EOF
          )
          
          # Filter based on deployment mode
          MODE="${{ github.event.inputs.deployment_mode }}"
          case "$MODE" in
            "backend-only")
              FILTERED=$(echo "$SERVICES_JSON" | jq '.include | map(select(.type == "rust"))')
              ;;
            "frontend-only")
              FILTERED=$(echo "$SERVICES_JSON" | jq '.include | map(select(.type == "frontend"))')
              ;;
            "ai-services-only")
              FILTERED=$(echo "$SERVICES_JSON" | jq '.include | map(select(.type == "python" and (.name | contains("rag"))))')
              ;;
            *)
              FILTERED=$(echo "$SERVICES_JSON" | jq '.include')
              ;;
          esac
          
          MATRIX=$(echo "{\"include\": $FILTERED}" | jq -c .)
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  # 🧪 Run tests before deployment
  test:
    name: 🧪 Pre-deployment Tests
    needs: pre-deploy
    if: needs.pre-deploy.outputs.should_deploy == 'true' && github.event.inputs.skip_tests != 'true'
    uses: ./.github/workflows/ci.yml
    with:
      test_level: quick

  # 🏗️ Build and push Docker images
  build:
    name: 🏗️ Build ${{ matrix.name }}
    needs: [pre-deploy, test]
    if: |
      always() &&
      needs.pre-deploy.outputs.should_deploy == 'true' &&
      (needs.test.result == 'success' || needs.test.result == 'skipped')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.pre-deploy.outputs.services_matrix) }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for Dockerfile
        id: dockerfile-check
        run: |
          if [ -f "${{ matrix.path }}/${{ matrix.dockerfile }}" ]; then
            echo "has_dockerfile=true" >> $GITHUB_OUTPUT
          else
            echo "has_dockerfile=false" >> $GITHUB_OUTPUT
            echo "⚠️ No Dockerfile found, will generate one"
          fi

      - name: Generate Dockerfile if missing
        if: steps.dockerfile-check.outputs.has_dockerfile == 'false'
        run: |
          mkdir -p "${{ matrix.path }}"
          
          case "${{ matrix.type }}" in
            "rust")
              cat > "${{ matrix.path }}/Dockerfile" << 'EOF'
# Build stage
FROM rust:1.75-slim AS builder
WORKDIR /usr/src/app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy workspace files
COPY Cargo.toml Cargo.lock ./
COPY lims-core ./lims-core
COPY test-helpers ./test-helpers

# Build the service
WORKDIR /usr/src/app/${{ matrix.path }}
RUN cargo build --release

# Runtime stage
FROM debian:bookworm-slim
WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -u 1000 -s /bin/bash tracseq

# Copy binary from builder
COPY --from=builder /usr/src/app/${{ matrix.path }}/target/release/* ./

# Set ownership
RUN chown -R tracseq:tracseq /app

USER tracseq

EXPOSE 3000
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Find and run the executable
CMD ["sh", "-c", "exec ./*service 2>/dev/null || exec ./*_service 2>/dev/null || exec ./*"]
EOF
              ;;
            
            "python")
              cat > "${{ matrix.path }}/Dockerfile" << 'EOF'
FROM python:3.11-slim
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install dependencies
COPY ${{ matrix.path }}/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY ${{ matrix.path }} ./

# Create non-root user
RUN useradd -m -u 1000 -s /bin/bash tracseq && \
    chown -R tracseq:tracseq /app

USER tracseq

EXPOSE 8000
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
EOF
              ;;
            
            "frontend")
              cat > "${{ matrix.path }}/Dockerfile" << 'EOF'
# Build stage
FROM node:20-alpine AS builder
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@10.12.2

# Copy package files
COPY ${{ matrix.path }}/package.json ${{ matrix.path }}/pnpm-lock.yaml ./

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source
COPY ${{ matrix.path }} ./

# Build
RUN pnpm build

# Runtime stage
FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html

# Custom nginx config
RUN echo 'server { \
    listen 80; \
    server_name _; \
    root /usr/share/nginx/html; \
    index index.html; \
    \
    location / { \
        try_files $uri $uri/ /index.html; \
    } \
    \
    location /api { \
        proxy_pass http://api-gateway:8000; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
    } \
    \
    location /health { \
        access_log off; \
        add_header Content-Type text/plain; \
        return 200 "healthy"; \
    } \
}' > /etc/nginx/conf.d/default.conf

EXPOSE 80
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost/health || exit 1
EOF
              ;;
          esac

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=raw,value=${{ needs.pre-deploy.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.path }}/${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ needs.pre-deploy.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  # 🚀 Deploy to environment
  deploy:
    name: 🚀 Deploy to ${{ needs.pre-deploy.outputs.environment }}
    needs: [pre-deploy, build]
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.pre-deploy.outputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to ${{ needs.pre-deploy.outputs.environment }}
        env:
          ENVIRONMENT: ${{ needs.pre-deploy.outputs.environment }}
          VERSION: ${{ needs.pre-deploy.outputs.version }}
        run: |
          echo "🚀 Deploying TracSeq 2.0 to $ENVIRONMENT"
          echo "📌 Version: $VERSION"
          
          # Here you would add your actual deployment commands
          # Examples:
          # - kubectl apply -f k8s/
          # - helm upgrade --install tracseq ./charts/tracseq
          # - ssh deploy@server 'docker-compose pull && docker-compose up -d'
          
          echo "✅ Deployment initiated"

      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."
          # Add health checks here
          echo "✅ Deployment verification complete"

  # 📊 Post-deployment validation
  validate:
    name: 📊 Post-deployment Validation
    needs: [pre-deploy, deploy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run smoke tests
        env:
          ENVIRONMENT: ${{ needs.pre-deploy.outputs.environment }}
        run: |
          echo "🧪 Running smoke tests for $ENVIRONMENT"
          
          # Add your smoke tests here
          # Example: curl health endpoints, run basic integration tests
          
          echo "✅ Smoke tests passed"

      - name: Update deployment status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ Deployment to ${{ needs.pre-deploy.outputs.environment }} successful!"
          else
            echo "❌ Deployment to ${{ needs.pre-deploy.outputs.environment }} failed!"
            exit 1
          fi
