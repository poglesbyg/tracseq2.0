name: TracSeq 2.0 Microservices CI/CD

on:
  push:
    branches: [ main, develop, 'release/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  RUST_VERSION: '1.82'
  DOCKER_REGISTRY: 'ghcr.io'
  NAMESPACE: 'tracseq'

jobs:
  # ========================================
  # Stage 1: Code Quality & Security Checks
  # ========================================
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Rust services in lims-core
          - service: auth_service
            path: lims-core/auth_service
          - service: sample_service
            path: lims-core/sample_service
          - service: template_service
            path: lims-core/template_service
          - service: sequencing_service
            path: lims-core/sequencing_service
          - service: notification_service
            path: lims-core/notification_service
          - service: transaction_service
            path: lims-core/transaction_service
          - service: event_service
            path: lims-core/event_service
          - service: enhanced_storage_service
            path: lims-core/enhanced_storage_service
          - service: qaqc_service
            path: lims-core/qaqc_service
          - service: spreadsheet_versioning_service
            path: lims-core/spreadsheet_versioning_service
          - service: library_details_service
            path: lims-core/library_details_service
          - service: dashboard_service
            path: lims-core/dashboard_service
          - service: reports_service
            path: lims-core/reports_service
          - service: cognitive_assistant_service
            path: lims-core/cognitive_assistant_service
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
          
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.service }}-${{ hashFiles('Cargo.lock') }}
          
      - name: Format check
        working-directory: ${{ matrix.path }}
        run: cargo fmt -- --check
        
      - name: Clippy analysis
        working-directory: ${{ matrix.path }}
        run: cargo clippy -- -D warnings
        
      - name: Security audit
        working-directory: ${{ matrix.path }}
        run: |
          cargo install cargo-audit
          cargo audit

  python-quality:
    name: Python Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: api_gateway
            path: lims-core/api_gateway
          - service: lab_submission_rag
            path: lims-ai/lab_submission_rag
          - service: enhanced_rag_service
            path: lims-ai/enhanced_rag_service
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        working-directory: ${{ matrix.path }}
        run: |
          pip install -r requirements.txt
          pip install black flake8 mypy safety bandit
          
      - name: Black formatting
        working-directory: ${{ matrix.path }}
        run: black --check .
        
      - name: Flake8 linting
        working-directory: ${{ matrix.path }}
        run: flake8 .
        
      - name: Type checking
        working-directory: ${{ matrix.path }}
        run: mypy . || echo "Type checking warnings"
        
      - name: Security scan
        working-directory: ${{ matrix.path }}
        run: |
          safety check
          bandit -r .

  # ========================================
  # Stage 2: Unit Tests
  # ========================================
  unit-tests:
    name: Unit Tests
    needs: [code-quality]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Rust services
          - service: auth_service
            path: lims-core/auth_service
          - service: sample_service
            path: lims-core/sample_service
          - service: template_service
            path: lims-core/template_service
          - service: sequencing_service
            path: lims-core/sequencing_service
          - service: notification_service
            path: lims-core/notification_service
          - service: transaction_service
            path: lims-core/transaction_service
          - service: event_service
            path: lims-core/event_service
          - service: enhanced_storage_service
            path: lims-core/enhanced_storage_service
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.service }}-${{ hashFiles('Cargo.lock') }}
          
      - name: Run unit tests
        working-directory: ${{ matrix.path }}
        run: |
          cargo test --lib --bins
          cargo test --doc
        env:
          RUST_BACKTRACE: 1
          
      - name: Generate test coverage
        working-directory: ${{ matrix.path }}
        run: |
          cargo install cargo-tarpaulin
          cargo tarpaulin --out Xml --output-dir coverage
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ${{ matrix.path }}/coverage/cobertura.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  python-unit-tests:
    name: Python Unit Tests
    needs: [python-quality]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: api_gateway
            path: lims-core/api_gateway
          - service: lab_submission_rag
            path: lims-ai/lab_submission_rag
          - service: enhanced_rag_service
            path: lims-ai/enhanced_rag_service
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        working-directory: ${{ matrix.path }}
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
          
      - name: Run unit tests
        working-directory: ${{ matrix.path }}
        run: |
          pytest tests/unit -v --cov=. --cov-report=xml || pytest tests/ -v --cov=. --cov-report=xml
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ${{ matrix.path }}/coverage.xml
          flags: ${{ matrix.service }}

  # ========================================
  # Stage 3: Integration Tests
  # ========================================
  integration-tests:
    name: Integration Tests
    needs: [unit-tests, python-unit-tests]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: tracseq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup test environment
        run: |
          cp .env.example .env.test || echo "No .env.example found"
          echo "DATABASE_URL=postgresql://postgres:testpass@localhost:5432/tracseq_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          
      - name: Run integration tests
        run: |
          if [ -d "tests" ]; then
            cd tests
            if [ -f "integration_data_flows.rs" ]; then
              cargo test --test integration_data_flows -- --test-threads=1
            fi
          fi
        env:
          TEST_DATABASE_URL: postgresql://postgres:testpass@localhost:5432/tracseq_test
          
      - name: Collect service logs
        if: failure()
        run: echo "Integration test logs would be collected here"

  # ========================================
  # Stage 4: Build Docker Images
  # ========================================
  build-images:
    name: Build Docker Images
    needs: [integration-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        include:
          # Rust services
          - service: auth_service
            path: lims-core/auth_service
            dockerfile: Dockerfile
          - service: sample_service
            path: lims-core/sample_service
            dockerfile: Dockerfile
          - service: enhanced_storage_service
            path: lims-core/enhanced_storage_service
            dockerfile: Dockerfile
          - service: event_service
            path: lims-core/event_service
            dockerfile: Dockerfile
          - service: notification_service
            path: lims-core/notification_service
            dockerfile: Dockerfile
          # Python services
          - service: api_gateway
            path: lims-core/api_gateway
            dockerfile: Dockerfile
          - service: lab_submission_rag
            path: lims-ai/lab_submission_rag
            dockerfile: Dockerfile
          - service: enhanced_rag_service
            path: lims-ai/enhanced_rag_service
            dockerfile: Dockerfile
          # Frontend
          - service: frontend
            path: lims-ui
            dockerfile: Dockerfile
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.NAMESPACE }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ matrix.path }}/${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

  # ========================================
  # Stage 5: Security Scanning
  # ========================================
  security-scan:
    name: Security Scanning
    needs: [build-images]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - auth_service
          - sample_service
          - enhanced_storage_service
          - api_gateway
          - lab_submission_rag
          - frontend
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.NAMESPACE }}-${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # ========================================
  # Stage 6: Deploy to Staging
  # ========================================
  deploy-staging:
    name: Deploy to Staging
    needs: [security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.tracseq.io
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: Deploy to staging
        run: |
          echo "Deployment to staging would happen here"
          # Actual deployment commands would go here
            
      - name: Run smoke tests
        run: |
          echo "Smoke tests would run here"
          # cd tests/smoke
          # npm install
          # npm run test:staging

  # ========================================
  # Stage 7: Deploy to Production
  # ========================================
  deploy-production:
    name: Deploy to Production
    needs: [security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    environment:
      name: production
      url: https://tracseq.io
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: Deploy to production
        run: |
          echo "Deployment to production would happen here"
          # Actual deployment commands would go here
            
      - name: Run smoke tests
        run: |
          echo "Production smoke tests would run here"
          # cd tests/smoke
          # npm install
          # npm run test:production