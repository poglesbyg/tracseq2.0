# TracSeq 2.0 Microservices CI/CD Pipeline
name: 🔬 Microservices CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'lims-core/**'
      - 'lims-ai/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/microservices-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'lims-core/**'
      - 'lims-ai/**'
      - 'Cargo.toml'
      - 'Cargo.lock'

env:
  RUST_VERSION: '1.75'
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_PREFIX: '${{ github.repository_owner }}/tracseq'

jobs:
  # 🔍 Detect changed services
  detect-changes:
    name: 🔍 Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      rust_services: ${{ steps.detect.outputs.rust_services }}
      python_services: ${{ steps.detect.outputs.python_services }}
      any_changed: ${{ steps.detect.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed services
        id: detect
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1...HEAD)
          fi
          
          # Initialize arrays
          RUST_SERVICES=()
          PYTHON_SERVICES=()
          
          # Check Rust services
          for service_dir in lims-core/*/; do
            service=$(basename "$service_dir")
            if [ -f "$service_dir/Cargo.toml" ]; then
              # Check if this service has changes
              if echo "$CHANGED_FILES" | grep -q "lims-core/$service/"; then
                RUST_SERVICES+=("$service")
              fi
            fi
          done
          
          # Check Python services
          if echo "$CHANGED_FILES" | grep -q "lims-core/api_gateway/"; then
            PYTHON_SERVICES+=("api_gateway")
          fi
          if echo "$CHANGED_FILES" | grep -q "lims-ai/lab_submission_rag/"; then
            PYTHON_SERVICES+=("lab_submission_rag")
          fi
          if echo "$CHANGED_FILES" | grep -q "lims-ai/enhanced_rag_service/"; then
            PYTHON_SERVICES+=("enhanced_rag_service")
          fi
          
          # Convert to JSON arrays
          RUST_JSON=$(printf '%s\n' "${RUST_SERVICES[@]}" | jq -R . | jq -s .)
          PYTHON_JSON=$(printf '%s\n' "${PYTHON_SERVICES[@]}" | jq -R . | jq -s .)
          
          # Output results
          echo "rust_services=$RUST_JSON" >> $GITHUB_OUTPUT
          echo "python_services=$PYTHON_JSON" >> $GITHUB_OUTPUT
          
          # Check if any services changed
          if [ ${#RUST_SERVICES[@]} -gt 0 ] || [ ${#PYTHON_SERVICES[@]} -gt 0 ]; then
            echo "any_changed=true" >> $GITHUB_OUTPUT
          else
            echo "any_changed=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Changed Rust services: ${RUST_SERVICES[@]}"
          echo "Changed Python services: ${PYTHON_SERVICES[@]}"

  # 🦀 Rust Service Tests
  rust-tests:
    name: 🦀 Test ${{ matrix.service }}
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true' && needs.detect-changes.outputs.rust_services != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.rust_services) }}
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.service }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client libpq-dev pkg-config libssl-dev

      - name: Format check
        working-directory: lims-core/${{ matrix.service }}
        run: cargo fmt -- --check

      - name: Clippy
        working-directory: lims-core/${{ matrix.service }}
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        working-directory: lims-core/${{ matrix.service }}
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
        run: |
          # Install sqlx-cli if needed
          if [ -d "migrations" ]; then
            cargo install sqlx-cli --no-default-features --features postgres,rustls
            sqlx database create || true
            sqlx migrate run
          fi
          
          # Run tests with coverage
          cargo install cargo-tarpaulin
          cargo tarpaulin --out Xml --output-dir coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: lims-core/${{ matrix.service }}/coverage/cobertura.xml
          flags: ${{ matrix.service }}

  # 🐍 Python Service Tests
  python-tests:
    name: 🐍 Test ${{ matrix.service }}
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true' && needs.detect-changes.outputs.python_services != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.python_services) }}
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Determine service path
        id: service-path
        run: |
          case "${{ matrix.service }}" in
            "api_gateway")
              echo "path=lims-core/api_gateway" >> $GITHUB_OUTPUT
              ;;
            "lab_submission_rag")
              echo "path=lims-ai/lab_submission_rag" >> $GITHUB_OUTPUT
              ;;
            "enhanced_rag_service")
              echo "path=lims-ai/enhanced_rag_service" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Install dependencies
        working-directory: ${{ steps.service-path.outputs.path }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 mypy pytest pytest-cov pytest-asyncio

      - name: Format check
        working-directory: ${{ steps.service-path.outputs.path }}
        run: |
          black --check .
          isort --check-only .

      - name: Lint
        working-directory: ${{ steps.service-path.outputs.path }}
        run: flake8 . --max-line-length=88 --extend-ignore=E203,W503

      - name: Type check
        working-directory: ${{ steps.service-path.outputs.path }}
        run: mypy . --ignore-missing-imports || true

      - name: Run tests
        working-directory: ${{ steps.service-path.outputs.path }}
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          if [ -d "tests" ]; then
            pytest tests/ -v --cov=. --cov-report=xml
          else
            echo "No tests directory found"
          fi

      - name: Upload coverage
        if: always()
        uses: codecov/codecov-action@v3
        with:
          file: ${{ steps.service-path.outputs.path }}/coverage.xml
          flags: ${{ matrix.service }}

  # 🐳 Build Docker Images
  build-images:
    name: 🐳 Build ${{ matrix.service }}
    needs: [detect-changes, rust-tests, python-tests]
    if: |
      always() &&
      needs.detect-changes.outputs.any_changed == 'true' &&
      (needs.rust-tests.result == 'success' || needs.rust-tests.result == 'skipped') &&
      (needs.python-tests.result == 'success' || needs.python-tests.result == 'skipped') &&
      github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(format('[{0},{1}]', join(fromJson(needs.detect-changes.outputs.rust_services), ','), join(fromJson(needs.detect-changes.outputs.python_services), ','))) }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Determine service info
        id: service-info
        run: |
          SERVICE="${{ matrix.service }}"
          
          # Determine path and type
          if [ -d "lims-core/$SERVICE" ]; then
            echo "path=lims-core/$SERVICE" >> $GITHUB_OUTPUT
            if [ -f "lims-core/$SERVICE/Cargo.toml" ]; then
              echo "type=rust" >> $GITHUB_OUTPUT
            else
              echo "type=python" >> $GITHUB_OUTPUT
            fi
          elif [ -d "lims-ai/$SERVICE" ]; then
            echo "path=lims-ai/$SERVICE" >> $GITHUB_OUTPUT
            echo "type=python" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ steps.service-info.outputs.path }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🔒 Security Scan
  security-scan:
    name: 🔒 Security Scan
    needs: build-images
    if: always() && needs.build-images.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'repo'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ✅ CI/CD Summary
  summary:
    name: ✅ CI/CD Summary
    needs: [detect-changes, rust-tests, python-tests, build-images, security-scan]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "## 🔬 Microservices CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Changed Services:" >> $GITHUB_STEP_SUMMARY
          echo "- Rust: ${{ needs.detect-changes.outputs.rust_services }}" >> $GITHUB_STEP_SUMMARY
          echo "- Python: ${{ needs.detect-changes.outputs.python_services }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Rust Tests | ${{ needs.rust-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Tests | ${{ needs.python-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Images | ${{ needs.build-images.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY