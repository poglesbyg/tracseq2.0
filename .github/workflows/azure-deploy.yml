# Azure Container Apps Deployment for TracSeq 2.0
name: Deploy TracSeq 2.0 to Azure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production

env:
  REGISTRY_NAME: tracseqregistry
  RESOURCE_GROUP: tracseq-rg
  CONTAINER_APP_ENV: tracseq-env

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ env.REGISTRY_NAME }}
    
    - name: Set environment variables
      run: |
        echo "IMAGE_TAG=${{ github.event.inputs.environment }}-${{ github.sha }}" >> $GITHUB_ENV
        echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV

    - name: Build and push images
      run: |
        echo "🏗️ Building container images for Azure deployment"
        
        # Build Rust services
        for service in lims-core/*/; do
          if [ -f "$service/Dockerfile" ]; then
            service_name=$(basename $service)
            echo "Building $service_name..."
            docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/tracseq-$service_name:${{ env.IMAGE_TAG }} $service
            docker push ${{ env.REGISTRY_NAME }}.azurecr.io/tracseq-$service_name:${{ env.IMAGE_TAG }}
          fi
        done
        
        # Build Python AI services
        for service in lims-ai/*/; do
          if [ -f "$service/Dockerfile" ]; then
            service_name=$(basename $service)
            echo "Building $service_name..."
            docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/tracseq-$service_name:${{ env.IMAGE_TAG }} $service
            docker push ${{ env.REGISTRY_NAME }}.azurecr.io/tracseq-$service_name:${{ env.IMAGE_TAG }}
          fi
        done
        
        # Build frontend
        if [ -f "lims-ui/Dockerfile" ]; then
          echo "Building frontend..."
          docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/tracseq-frontend:${{ env.IMAGE_TAG }} lims-ui
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/tracseq-frontend:${{ env.IMAGE_TAG }}
        fi

    - name: Deploy to Azure Container Apps
      run: |
        echo "🚀 Deploying to Azure Container Apps"
        
        # Deploy core services
        CORE_SERVICES=("auth_service" "sample_service" "enhanced_storage_service" "api_gateway")
        for service in "${CORE_SERVICES[@]}"; do
          echo "Deploying $service..."
          
          az containerapp create \
            --name tracseq-$service-${{ env.DEPLOY_ENV }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment ${{ env.CONTAINER_APP_ENV }} \
            --image ${{ env.REGISTRY_NAME }}.azurecr.io/tracseq-$service:${{ env.IMAGE_TAG }} \
            --cpu 0.5 \
            --memory 1.0Gi \
            --min-replicas 1 \
            --max-replicas 3 \
            --ingress external \
            --target-port 3000 \
            --query properties.configuration.ingress.fqdn \
            --output tsv || \
          az containerapp update \
            --name tracseq-$service-${{ env.DEPLOY_ENV }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.REGISTRY_NAME }}.azurecr.io/tracseq-$service:${{ env.IMAGE_TAG }}
        done
        
        # Deploy AI services
        AI_SERVICES=("lab_submission_rag" "enhanced_rag_service")
        for service in "${AI_SERVICES[@]}"; do
          echo "Deploying $service..."
          
          az containerapp create \
            --name tracseq-$service-${{ env.DEPLOY_ENV }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment ${{ env.CONTAINER_APP_ENV }} \
            --image ${{ env.REGISTRY_NAME }}.azurecr.io/tracseq-$service:${{ env.IMAGE_TAG }} \
            --cpu 1.0 \
            --memory 2.0Gi \
            --min-replicas 1 \
            --max-replicas 2 \
            --ingress external \
            --target-port 8000 \
            --query properties.configuration.ingress.fqdn \
            --output tsv || \
          az containerapp update \
            --name tracseq-$service-${{ env.DEPLOY_ENV }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.REGISTRY_NAME }}.azurecr.io/tracseq-$service:${{ env.IMAGE_TAG }}
        done
        
        # Deploy frontend
        echo "Deploying frontend..."
        az containerapp create \
          --name tracseq-frontend-${{ env.DEPLOY_ENV }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --environment ${{ env.CONTAINER_APP_ENV }} \
          --image ${{ env.REGISTRY_NAME }}.azurecr.io/tracseq-frontend:${{ env.IMAGE_TAG }} \
          --cpu 0.25 \
          --memory 0.5Gi \
          --min-replicas 1 \
          --max-replicas 5 \
          --ingress external \
          --target-port 80 \
          --query properties.configuration.ingress.fqdn \
          --output tsv || \
        az containerapp update \
          --name tracseq-frontend-${{ env.DEPLOY_ENV }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.REGISTRY_NAME }}.azurecr.io/tracseq-frontend:${{ env.IMAGE_TAG }}
    
    - name: Health check
      run: |
        echo "🏥 Running health checks"
        sleep 30  # Wait for services to start
        
        # Get service URLs and check health
        SERVICES=("auth_service" "sample_service" "api_gateway" "frontend")
        for service in "${SERVICES[@]}"; do
          URL=$(az containerapp show \
            --name tracseq-$service-${{ env.DEPLOY_ENV }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)
          
          if [ ! -z "$URL" ]; then
            echo "Checking $service at https://$URL/health"
            curl -f https://$URL/health || echo "Health check failed for $service"
          fi
        done
    
    - name: Summary
      run: |
        echo "# 🚀 Azure Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Deployed Services" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # List deployed services
        az containerapp list \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "[?contains(name, 'tracseq') && contains(name, '${{ env.DEPLOY_ENV }}')].{Name:name, URL:properties.configuration.ingress.fqdn, Status:properties.provisioningState}" \
          --output table >> $GITHUB_STEP_SUMMARY
