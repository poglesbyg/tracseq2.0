# TracSeq 2.0 Laboratory Management System - Comprehensive CI Pipeline
name: 🧬 TracSeq 2.0 CI/CD Pipeline

on:
  push:
    branches: [ "dev", "main", "master" ]
  pull_request:
    branches: [ "dev", "main", "master" ]
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: true
        default: 'full'
        type: choice
        options:
        - quick
        - full
        - comprehensive
      skip_slow_tests:
        description: 'Skip slow integration tests'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: debug
  SQLX_OFFLINE: true
  NODE_VERSION: '20'
  PNPM_VERSION: '10.12.2'
  RUST_VERSION: '1.75'
  PYTHON_VERSION: '3.11'

jobs:
  # 🔍 Early validation and linting
  lint-and-typecheck:
    name: 🔍 Lint & TypeCheck
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      has_frontend: ${{ steps.check-structure.outputs.has_frontend }}
      has_rust: ${{ steps.check-structure.outputs.has_rust }}
      has_python: ${{ steps.check-structure.outputs.has_python }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check repository structure
        id: check-structure
        run: |
          echo "has_frontend=$([ -d 'lims-ui' ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "has_rust=$([ -f 'Cargo.toml' ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "has_python=$([ -d 'lims-ai' ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      # 📦 Setup tools
      - name: Setup Node.js and pnpm
        if: steps.check-structure.outputs.has_frontend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        if: steps.check-structure.outputs.has_frontend == 'true'
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Rust toolchain
        if: steps.check-structure.outputs.has_rust == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Setup Python
        if: steps.check-structure.outputs.has_python == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # 🔄 TypeScript/Frontend checks
      - name: 📋 TypeScript TypeCheck
        if: steps.check-structure.outputs.has_frontend == 'true'
        working-directory: lims-ui
        run: |
          echo "🔍 Running pnpm typecheck"
          pnpm install --frozen-lockfile
          if pnpm typecheck; then
            echo "✅ TypeScript checks passed"
          else
            echo "❌ TypeScript checks failed"
            exit 1
          fi

      - name: 🔍 Frontend Lint
        if: steps.check-structure.outputs.has_frontend == 'true'
        working-directory: lims-ui
        run: |
          echo "🔍 Running pnpm lint"
          if pnpm lint; then
            echo "✅ Frontend linting passed"
          else
            echo "⚠️ Frontend linting failed, attempting auto-fix"
            if pnpm fix; then
              echo "✅ Auto-fix successful"
            else
              echo "❌ Auto-fix failed"
              exit 1
            fi
          fi

      # 🦀 Rust checks
      - name: 🦀 Rust Format Check
        if: steps.check-structure.outputs.has_rust == 'true'
        run: |
          echo "🔍 Checking Rust code formatting"
          if cargo fmt --all -- --check; then
            echo "✅ Rust formatting is correct"
          else
            echo "❌ Rust formatting issues found"
            echo "Run 'cargo fmt' to fix formatting"
            exit 1
          fi

      - name: 🦀 Rust Clippy Lint
        if: steps.check-structure.outputs.has_rust == 'true'
        run: |
          echo "🔍 Running Rust clippy linting"
          cargo clippy --all-targets --all-features -- \
            -D warnings \
            -W clippy::suspicious \
            -W clippy::complexity \
            -W clippy::perf

      # 🐍 Python checks
      - name: 🐍 Python Lint
        if: steps.check-structure.outputs.has_python == 'true'
        run: |
          echo "🔍 Running Python linting"
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy
          
          # Check Python files in lims-ai directory
          cd lims-ai
          
          # Format check
          if black --check .; then
            echo "✅ Python formatting is correct"
          else
            echo "❌ Python formatting issues found"
            black --diff .
            exit 1
          fi
          
          # Import sorting
          if isort --check-only .; then
            echo "✅ Python imports are sorted"
          else
            echo "❌ Python import sorting issues found"
            exit 1
          fi
          
          # Linting
          flake8 --max-line-length=88 --extend-ignore=E203,W503 .

  # 🧪 Test Suite
  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: lint-and-typecheck
    if: success()
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: tracseq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup complete development environment
        run: |
          echo "🏗️ Setting up TracSeq 2.0 development environment"
          
          # Install system dependencies
          sudo apt-get update
          sudo apt-get install -y \
            postgresql-client \
            libpq-dev \
            pkg-config \
            libssl-dev \
            curl \
            jq

      - name: Setup Node.js and pnpm
        if: needs.lint-and-typecheck.outputs.has_frontend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        if: needs.lint-and-typecheck.outputs.has_frontend == 'true'
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Rust toolchain
        if: needs.lint-and-typecheck.outputs.has_rust == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Setup Python
        if: needs.lint-and-typecheck.outputs.has_python == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            lims-ui/node_modules/
            ~/.cache/pip
          key: ${{ runner.os }}-deps-${{ hashFiles('**/Cargo.lock', '**/pnpm-lock.yaml', '**/requirements.txt') }}

      # 🎨 Frontend Tests
      - name: 🎨 Frontend Tests
        if: needs.lint-and-typecheck.outputs.has_frontend == 'true'
        working-directory: lims-ui
        run: |
          echo "🧪 Running frontend tests"
          pnpm install --frozen-lockfile
          pnpm test

      # 🦀 Rust Backend Tests
      - name: 🦀 Rust Backend Tests
        if: needs.lint-and-typecheck.outputs.has_rust == 'true'
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/tracseq_test
          REDIS_URL: redis://localhost:6379
          SQLX_OFFLINE: false
        run: |
          echo "🧪 Running Rust backend tests"
          
          # Setup test database
          timeout 60s bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
          
          # Install sqlx-cli for migrations
          cargo install sqlx-cli --version 0.8.0 --no-default-features --features postgres,rustls
          
          # Run migrations for services in lims-core
          for service in lims-core/*/; do
            if [ -d "$service/migrations" ]; then
              echo "Running migrations for $service"
              cd $service && sqlx migrate run && cd ../..
            fi
          done
          
          # Run tests
          if [ "${{ github.event.inputs.skip_slow_tests }}" = "true" ]; then
            echo "⚡ Running quick tests only"
            cargo test --lib --bins
          else
            echo "🔄 Running comprehensive tests"
            cargo test --verbose
          fi

      # 🐍 Python AI Service Tests
      - name: 🐍 Python AI Service Tests
        if: needs.lint-and-typecheck.outputs.has_python == 'true'
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/tracseq_test
          PYTHONPATH: .
        run: |
          echo "🧪 Running Python AI service tests"
          
          # Install Python dependencies
          python -m pip install --upgrade pip
          
          # Install dependencies for AI services
          cd lims-ai
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          
          # Install specific service dependencies
          for service in lab_submission_rag enhanced_rag_service; do
            if [ -f "$service/requirements.txt" ]; then
              echo "Installing dependencies for $service"
              pip install -r $service/requirements.txt
            fi
          done
          
          # Install test dependencies
          pip install pytest pytest-cov pytest-asyncio httpx
          
          # Run tests
          if [ -d "lab_submission_rag/tests" ]; then
            echo "Running tests for lab_submission_rag"
            cd lab_submission_rag
            pytest tests/ -v --cov=. --cov-report=term-missing || echo "⚠️ Tests failed for lab_submission_rag"
            cd ..
          fi
          
          if [ -d "enhanced_rag_service/tests" ]; then
            echo "Running tests for enhanced_rag_service"
            cd enhanced_rag_service
            pytest tests/ -v --cov=. --cov-report=term-missing || echo "⚠️ Tests failed for enhanced_rag_service"
            cd ..
          fi

  # � Microservices Architecture Validation
  microservices-validation:
    name: 🏗️ Microservices Architecture Validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [lint-and-typecheck, test-suite]
    if: success()
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Rust services in lims-core
          - service: auth_service
            path: lims-core/auth_service
            type: rust
          - service: sample_service
            path: lims-core/sample_service
            type: rust
          - service: enhanced_storage_service
            path: lims-core/enhanced_storage_service
            type: rust
          - service: transaction_service
            path: lims-core/transaction_service
            type: rust
          - service: event_service
            path: lims-core/event_service
            type: rust
          - service: sequencing_service
            path: lims-core/sequencing_service
            type: rust
          - service: notification_service
            path: lims-core/notification_service
            type: rust
          - service: qaqc_service
            path: lims-core/qaqc_service
            type: rust
          - service: template_service
            path: lims-core/template_service
            type: rust
          - service: spreadsheet_versioning_service
            path: lims-core/spreadsheet_versioning_service
            type: rust
          - service: library_details_service
            path: lims-core/library_details_service
            type: rust
          # Python services in lims-ai
          - service: lab_submission_rag
            path: lims-ai/lab_submission_rag
            type: python
          - service: enhanced_rag_service
            path: lims-ai/enhanced_rag_service
            type: python
          # API Gateway in lims-core
          - service: api_gateway
            path: lims-core/api_gateway
            type: python
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate service structure for ${{ matrix.service }}
        run: |
          echo "🔍 Validating ${{ matrix.service }} structure at ${{ matrix.path }}"
          
          if [ ! -d "${{ matrix.path }}" ]; then
            echo "⚠️ Service directory not found: ${{ matrix.path }}"
            exit 1
          fi
          
          cd ${{ matrix.path }}
          
          # Check for proper service configuration
          if [ "${{ matrix.type }}" == "rust" ]; then
            if [ -f "Cargo.toml" ]; then
              echo "✅ Rust service configuration found"
              # Validate Cargo.toml structure
              if grep -q "tokio" Cargo.toml; then
                echo "✅ Async tokio-based service"
              fi
            else
              echo "❌ Cargo.toml not found for Rust service"
              exit 1
            fi
          elif [ "${{ matrix.type }}" == "python" ]; then
            if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
              echo "✅ Python service configuration found"
              # Validate Python service structure
              if [ -f "main.py" ] || [ -f "app.py" ] || [ -f "__main__.py" ]; then
                echo "✅ Python service entry point found"
              fi
            else
              echo "❌ No Python configuration found"
              exit 1
            fi
          fi
          
          # Check for health endpoint
          if find . -name "*.rs" -o -name "*.py" | xargs grep -l "health" | head -1; then
            echo "✅ Health endpoint implementation found"
          else
            echo "⚠️ No health endpoint found"
          fi
          
          echo "✅ Service validation completed for ${{ matrix.service }}"

  # 📊 Performance and Coverage Analysis
  performance-coverage:
    name: 📊 Performance & Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: test-suite
    if: success()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Install coverage tools
        run: |
          echo "📊 Installing coverage tools"
          cargo install cargo-tarpaulin --version 0.27.3

      - name: Generate Rust coverage report
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/tracseq_test
        run: |
          echo "📊 Generating coverage report for Rust services"
          cargo tarpaulin --workspace --out Html --output-dir ./coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/
            lims-ai/*/htmlcov/
          retention-days: 7

  # 🏗️ Build Validation
  build-validation:
    name: 🏗️ Build Validation
    runs-on: ubuntu-latest
    needs: [microservices-validation]
    if: success()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Docker configurations
        run: |
          echo "🐳 Validating Docker configurations"
          
          # Check main docker compose files
          for compose_file in docker/development/docker-compose.unified.yml docker/production/docker-compose.production.yml; do
            if [ -f "$compose_file" ]; then
              echo "✅ Found: $compose_file"
              # Validate YAML syntax
              if docker compose -f "$compose_file" config > /dev/null 2>&1; then
                echo "✅ Valid compose file: $compose_file"
              else
                echo "❌ Invalid compose file: $compose_file"
                docker compose -f "$compose_file" config
                exit 1
              fi
            fi
          done

      - name: Check Dockerfile presence
        run: |
          echo "🐳 Checking Dockerfiles"
          
          # Check for Dockerfiles in service directories
          for service_dir in lims-core/* lims-ai/*; do
            if [ -d "$service_dir" ] && [ -f "$service_dir/Dockerfile" ]; then
              echo "✅ Dockerfile found in $service_dir"
            elif [ -d "$service_dir" ]; then
              echo "⚠️ No Dockerfile in $service_dir"
            fi
          done
          
          # Check UI Dockerfile
          if [ -f "lims-ui/Dockerfile" ]; then
            echo "✅ Frontend Dockerfile found"
          else
            echo "⚠️ No frontend Dockerfile found"
          fi

  # 📋 Summary
  ci-summary:
    name: 📋 CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-suite, microservices-validation, performance-coverage, build-validation]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "# 📊 TracSeq 2.0 CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job statuses
          echo "## Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & TypeCheck | ${{ needs.lint-and-typecheck.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | ${{ needs.test-suite.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Microservices Validation | ${{ needs.microservices-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance & Coverage | ${{ needs.performance-coverage.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Validation | ${{ needs.build-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.lint-and-typecheck.result }}" == "success" ] && \
             [ "${{ needs.test-suite.result }}" == "success" ] && \
             [ "${{ needs.microservices-validation.result }}" == "success" ] && \
             [ "${{ needs.performance-coverage.result }}" == "success" ] && \
             [ "${{ needs.build-validation.result }}" == "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All checks passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Some checks failed. Please review the logs.**" >> $GITHUB_STEP_SUMMARY
          fi 
