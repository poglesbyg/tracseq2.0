# TracSeq 2.0 Laboratory Management System - Main CI Pipeline
name: üß¨ TracSeq 2.0 CI Pipeline

on:
  push:
    branches: [ "dev", "main", "master" ]
  pull_request:
    branches: [ "dev", "main", "master" ]
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: true
        default: 'full'
        type: choice
        options:
        - quick
        - full
        - comprehensive

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: debug
  SQLX_OFFLINE: true
  NODE_VERSION: '20'
  PNPM_VERSION: '10.12.2'
  RUST_VERSION: '1.75'
  PYTHON_VERSION: '3.11'
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/tracseq_test
  REDIS_URL: redis://localhost:6379

jobs:
  # üîç Repository Structure Analysis
  analyze-changes:
    name: üîç Analyze Changes
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.changes.outputs.frontend }}
      rust_changed: ${{ steps.changes.outputs.rust }}
      python_changed: ${{ steps.changes.outputs.python }}
      docker_changed: ${{ steps.changes.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'lims-ui/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            rust:
              - 'lims-core/**'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'test-helpers/**'
            python:
              - 'lims-ai/**'
              - 'lims-gateway/api_gateway/**'
              - '**/*.py'
            docker:
              - 'docker/**'
              - '**/Dockerfile'
              - 'docker-compose*.yml'

  # üé® Frontend Checks
  frontend-checks:
    name: üé® Frontend CI
    runs-on: ubuntu-latest
    needs: analyze-changes
    if: needs.analyze-changes.outputs.frontend_changed == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('lims-ui/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: lims-ui
        run: pnpm install --frozen-lockfile

      - name: TypeScript type check
        working-directory: lims-ui
        run: pnpm typecheck

      - name: ESLint
        working-directory: lims-ui
        run: pnpm lint

      - name: Run tests
        working-directory: lims-ui
        run: pnpm test --passWithNoTests

      - name: Build frontend
        working-directory: lims-ui
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: lims-ui/dist/
          retention-days: 7

  # ü¶Ä Rust Checks
  rust-checks:
    name: ü¶Ä Rust CI - ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: analyze-changes
    if: needs.analyze-changes.outputs.rust_changed == 'true' || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        service:
          - auth_service
          - sample_service
          - enhanced_storage_service
          - event_service
          - notification_service
          - transaction_service
          - sequencing_service
          - qaqc_service
          - template_service
          - spreadsheet_versioning_service
          - library_details_service
          - dashboard_service
          - reports_service
          - cognitive_assistant_service
          - barcode_service
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: tracseq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.service }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.service }}-
            ${{ runner.os }}-cargo-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client libpq-dev pkg-config libssl-dev

      - name: Install sqlx-cli
        run: |
          if ! command -v sqlx &> /dev/null; then
            cargo install sqlx-cli --version 0.8.0 --no-default-features --features postgres,rustls
          fi

      - name: Check service exists
        id: service-check
        run: |
          if [ -d "lims-core/${{ matrix.service }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Service directory not found: lims-core/${{ matrix.service }}"
          fi

      - name: Format check
        if: steps.service-check.outputs.exists == 'true'
        working-directory: lims-core/${{ matrix.service }}
        run: cargo fmt -- --check

      - name: Clippy
        if: steps.service-check.outputs.exists == 'true'
        working-directory: lims-core/${{ matrix.service }}
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run migrations
        if: steps.service-check.outputs.exists == 'true'
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          SQLX_OFFLINE: false
        run: |
          if [ -d "lims-core/${{ matrix.service }}/migrations" ]; then
            cd lims-core/${{ matrix.service }}
            sqlx database create || true
            sqlx migrate run
          fi

      - name: Run tests
        if: steps.service-check.outputs.exists == 'true'
        working-directory: lims-core/${{ matrix.service }}
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: ${{ env.REDIS_URL }}
          SQLX_OFFLINE: false
        run: cargo test --all-features

  # üêç Python Checks
  python-checks:
    name: üêç Python CI - ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: analyze-changes
    if: needs.analyze-changes.outputs.python_changed == 'true' || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: api_gateway
            path: lims-gateway/api_gateway
          - service: lab_submission_rag
            path: lims-ai/lab_submission_rag
          - service: enhanced_rag_service
            path: lims-ai/enhanced_rag_service

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: tracseq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles(format('{0}/requirements.txt', matrix.path)) }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.service }}-
            ${{ runner.os }}-pip-

      - name: Check service exists
        id: service-check
        run: |
          if [ -d "${{ matrix.path }}" ] && [ -f "${{ matrix.path }}/requirements.txt" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Service not found or missing requirements.txt: ${{ matrix.path }}"
          fi

      - name: Install dependencies
        if: steps.service-check.outputs.exists == 'true'
        working-directory: ${{ matrix.path }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 mypy pytest pytest-cov pytest-asyncio httpx

      - name: Format check with Black
        if: steps.service-check.outputs.exists == 'true'
        working-directory: ${{ matrix.path }}
        run: black --check .

      - name: Import sorting with isort
        if: steps.service-check.outputs.exists == 'true'
        working-directory: ${{ matrix.path }}
        run: isort --check-only .

      - name: Lint with flake8
        if: steps.service-check.outputs.exists == 'true'
        working-directory: ${{ matrix.path }}
        run: flake8 . --max-line-length=88 --extend-ignore=E203,W503

      - name: Type check with mypy
        if: steps.service-check.outputs.exists == 'true'
        working-directory: ${{ matrix.path }}
        run: mypy . --ignore-missing-imports || echo "Type checking completed with warnings"

      - name: Run tests
        if: steps.service-check.outputs.exists == 'true'
        working-directory: ${{ matrix.path }}
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          PYTHONPATH: ${{ github.workspace }}/${{ matrix.path }}
        run: |
          if [ -d "tests" ]; then
            pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
          else
            echo "No tests directory found, skipping tests"
          fi

  # üß™ Integration Tests
  integration-tests:
    name: üß™ Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-checks, rust-checks, python-checks]
    if: |
      always() && 
      (needs.frontend-checks.result == 'success' || needs.frontend-checks.result == 'skipped') &&
      (needs.rust-checks.result == 'success' || needs.rust-checks.result == 'skipped') &&
      (needs.python-checks.result == 'success' || needs.python-checks.result == 'skipped')

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: tracseq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          # Install all required tools
          sudo apt-get update
          sudo apt-get install -y postgresql-client libpq-dev pkg-config libssl-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Install sqlx-cli
        run: |
          cargo install sqlx-cli --version 0.8.0 --no-default-features --features postgres,rustls

      - name: Run all migrations
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          SQLX_OFFLINE: false
        run: |
          # Create database
          sqlx database create || true
          
          # Run migrations for each service
          for service_dir in lims-core/*/; do
            if [ -d "$service_dir/migrations" ]; then
              echo "Running migrations for $service_dir"
              cd "$service_dir"
              sqlx migrate run
              cd - > /dev/null
            fi
          done

      - name: Run integration tests
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: ${{ env.REDIS_URL }}
          RUST_LOG: debug
        run: |
          # Run workspace-level integration tests
          if [ -f "tests/integration_data_flows.rs" ]; then
            cargo test --test integration_data_flows -- --test-threads=1
          fi
          
          # Run modular component tests
          if [ -f "tests/modular_components_test.rs" ]; then
            cargo test --test modular_components_test -- --test-threads=1
          fi

  # ‚úÖ Summary Check
  ci-summary:
    name: ‚úÖ CI Summary
    runs-on: ubuntu-latest
    needs: [analyze-changes, frontend-checks, rust-checks, python-checks, integration-tests]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          echo "üîç CI Pipeline Summary:"
          echo "========================"
          
          # Check each job status
          if [[ "${{ needs.frontend-checks.result }}" == "failure" ]]; then
            echo "‚ùå Frontend checks failed"
            exit 1
          elif [[ "${{ needs.frontend-checks.result }}" == "success" ]]; then
            echo "‚úÖ Frontend checks passed"
          else
            echo "‚è≠Ô∏è Frontend checks skipped"
          fi
          
          if [[ "${{ needs.rust-checks.result }}" == "failure" ]]; then
            echo "‚ùå Rust checks failed"
            exit 1
          elif [[ "${{ needs.rust-checks.result }}" == "success" ]]; then
            echo "‚úÖ Rust checks passed"
          else
            echo "‚è≠Ô∏è Rust checks skipped"
          fi
          
          if [[ "${{ needs.python-checks.result }}" == "failure" ]]; then
            echo "‚ùå Python checks failed"
            exit 1
          elif [[ "${{ needs.python-checks.result }}" == "success" ]]; then
            echo "‚úÖ Python checks passed"
          else
            echo "‚è≠Ô∏è Python checks skipped"
          fi
          
          if [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
            echo "‚ùå Integration tests failed"
            exit 1
          elif [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "‚úÖ Integration tests passed"
          else
            echo "‚è≠Ô∏è Integration tests skipped"
          fi
          
          echo "========================"
          echo "‚úÖ All CI checks completed successfully!" 
