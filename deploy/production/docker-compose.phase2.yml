version: '3.8'

services:
  # Phase 2 Services

  # QAQC (Quality Assurance/Quality Control) Service
  qaqc-service:
    build:
      context: ../../qaqc_service
      dockerfile: Dockerfile
    container_name: qaqc-service
    ports:
      - "8089:8089"
      - "9089:9089"  # Metrics port
    environment:
      # Service Configuration
      QAQC_HOST: 0.0.0.0
      QAQC_PORT: 8089
      METRICS_PORT: 9089
      
      # Database
      DATABASE_URL: postgres://tracseq_admin:${POSTGRES_PASSWORD}@postgres-primary:5432/tracseq_prod
      
      # Security
      JWT_SECRET: ${JWT_SECRET_KEY}
      
      # Service Integration
      AUTH_SERVICE_URL: http://auth-service:8080
      SAMPLE_SERVICE_URL: http://sample-service:8081
      SEQUENCING_SERVICE_URL: http://sequencing-service:8084
      SPREADSHEET_VERSIONING_SERVICE_URL: http://spreadsheet-versioning-service:8088
      
      # QAQC Configuration
      DEFAULT_QUALITY_THRESHOLD: 80.0
      ENABLE_REAL_TIME_MONITORING: true
      COMPLIANCE_STANDARDS: "ISO15189,CLIA,CAP,GLP"
      
      # Performance
      MAX_CONCURRENT_WORKFLOWS: 15
      WORKFLOW_TIMEOUT_SECONDS: 7200
      METRICS_RETENTION_DAYS: 180
      
    depends_on:
      - postgres-primary
      - auth-service
    volumes:
      - qaqc_logs:/app/logs
      - qaqc_reports:/app/reports
    networks:
      - tracseq-phase2-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/health"]
      interval: 30s
      timeout: 15s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1GB
          cpus: '1.5'
        reservations:
          memory: 512MB
          cpus: '0.5'

  # Library Details Service
  library-details-service:
    build:
      context: ../../library_details_service
      dockerfile: Dockerfile
    container_name: library-details-service
    ports:
      - "8090:8090"
      - "9090:9090"  # Metrics port
    environment:
      # Service Configuration
      LIBRARY_DETAILS_HOST: 0.0.0.0
      LIBRARY_DETAILS_PORT: 8090
      METRICS_PORT: 9090
      
      # Database
      DATABASE_URL: postgres://tracseq_admin:${POSTGRES_PASSWORD}@postgres-primary:5432/tracseq_prod
      
      # Security
      JWT_SECRET: ${JWT_SECRET_KEY}
      
      # Service Integration
      AUTH_SERVICE_URL: http://auth-service:8080
      SAMPLE_SERVICE_URL: http://sample-service:8081
      SEQUENCING_SERVICE_URL: http://sequencing-service:8084
      QAQC_SERVICE_URL: http://qaqc-service:8089
      
      # Library Configuration
      AUTO_CALCULATE_METRICS: true
      ENABLE_PROTOCOL_VALIDATION: true
      DEFAULT_LIBRARY_TYPE: "TruSeq"
      
      # Quality Control
      QC_ENABLED: true
      QC_THRESHOLDS_STRICT: true
      QUALITY_SCORE_MINIMUM: 8.0
      
    depends_on:
      - postgres-primary
      - auth-service
      - qaqc-service
    volumes:
      - library_data:/app/data
      - library_protocols:/app/protocols
    networks:
      - tracseq-phase2-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 15s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1GB
          cpus: '1.0'
        reservations:
          memory: 256MB
          cpus: '0.3'

  # Enhanced Spreadsheet Versioning Service (Phase 2)
  spreadsheet-versioning-service:
    build:
      context: ../../spreadsheet_versioning_service
      dockerfile: Dockerfile
    container_name: spreadsheet-versioning-service-v2
    ports:
      - "8088:8088"
      - "9088:9088"  # Metrics port
    environment:
      # Service Configuration
      VERSIONING_HOST: 0.0.0.0
      VERSIONING_PORT: 8088
      METRICS_PORT: 9088
      
      # Database
      DATABASE_URL: postgres://tracseq_admin:${POSTGRES_PASSWORD}@postgres-primary:5432/tracseq_prod
      
      # Security
      JWT_SECRET: ${JWT_SECRET_KEY}
      
      # Phase 2 Enhanced Features
      ENABLE_INTELLIGENT_MERGE: true
      ENABLE_AI_CONFLICT_RESOLUTION: true
      CONFIDENCE_THRESHOLD: 0.85
      AUTO_RESOLVE_SIMPLE_CONFLICTS: true
      
      # Integration with Phase 2 Services
      QAQC_SERVICE_URL: http://qaqc-service:8089
      LIBRARY_DETAILS_SERVICE_URL: http://library-details-service:8090
      
      # Advanced Configuration
      MAX_CONCURRENT_MERGES: 10
      MERGE_TIMEOUT_SECONDS: 1800
      ENABLE_LEARNING_MODE: true
      
    depends_on:
      - postgres-primary
      - qaqc-service
      - library-details-service
    volumes:
      - versioning_data:/app/data
      - versioning_logs:/app/logs
      - merge_cache:/app/cache
    networks:
      - tracseq-phase2-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 15s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2GB
          cpus: '2.0'
        reservations:
          memory: 512MB
          cpus: '0.5'

  # Enhanced Analytics Database
  postgres-analytics:
    image: postgres:15-alpine
    container_name: postgres-analytics
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: tracseq_analytics
      POSTGRES_USER: analytics_user
      POSTGRES_PASSWORD: ${ANALYTICS_DB_PASSWORD}
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=8MB
    volumes:
      - postgres_analytics_data:/var/lib/postgresql/data
    networks:
      - tracseq-phase2-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analytics_user -d tracseq_analytics"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Enhanced Monitoring with Prometheus
  prometheus-enhanced:
    image: prom/prometheus:latest
    container_name: prometheus-enhanced
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=365d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus-phase2.yml:/etc/prometheus/prometheus.yml
      - prometheus_enhanced_data:/prometheus
    networks:
      - tracseq-phase2-network
    restart: unless-stopped

  # Enhanced Grafana with Phase 2 Dashboards
  grafana-enhanced:
    image: grafana/grafana:latest
    container_name: grafana-enhanced
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: "grafana-piechart-panel,grafana-worldmap-panel"
      GF_FEATURE_TOGGLES_ENABLE: "ngalert"
    volumes:
      - grafana_enhanced_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - tracseq-phase2-network
    restart: unless-stopped
    depends_on:
      - prometheus-enhanced

  # ElasticSearch for Advanced Log Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - tracseq-phase2-network
    restart: unless-stopped

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - tracseq-phase2-network
    restart: unless-stopped
    depends_on:
      - elasticsearch

  # MinIO for File Storage
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - tracseq-phase2-network
    restart: unless-stopped

volumes:
  # Phase 2 Service Volumes
  qaqc_logs:
    driver: local
  qaqc_reports:
    driver: local
  library_data:
    driver: local
  library_protocols:
    driver: local
  versioning_data:
    driver: local
  versioning_logs:
    driver: local
  merge_cache:
    driver: local
    
  # Enhanced Database Volumes
  postgres_analytics_data:
    driver: local
  
  # Enhanced Monitoring Volumes
  prometheus_enhanced_data:
    driver: local
  grafana_enhanced_data:
    driver: local
  elasticsearch_data:
    driver: local
  
  # Storage Volumes
  minio_data:
    driver: local

networks:
  tracseq-phase2-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

# Development Override
# Use: docker-compose -f docker-compose.phase2.yml -f docker-compose.phase2.dev.yml up 
