modules:
  # HTTP 2xx probe
  http_2xx:
    prober: http
    timeout: 5s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200, 201, 202, 204]
      method: GET
      follow_redirects: true
      fail_if_ssl: false
      fail_if_not_ssl: false
      tls_config:
        insecure_skip_verify: false
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true

  # HTTP POST probe
  http_post_2xx:
    prober: http
    timeout: 5s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200, 201, 202]
      method: POST
      headers:
        Content-Type: application/json
      body: '{}'
      fail_if_ssl: false
      fail_if_not_ssl: false
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true

  # HTTP Basic Auth probe
  http_basic_auth:
    prober: http
    timeout: 5s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200, 401]
      method: GET
      fail_if_body_not_matches_regexp:
        - "Unauthorized"
      basic_auth:
        username: "monitoring"
        password: "monitoring_password"
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true

  # HTTPS probe with certificate validation
  https_2xx:
    prober: http
    timeout: 5s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: []
      method: GET
      follow_redirects: false
      fail_if_ssl: false
      fail_if_not_ssl: true
      tls_config:
        insecure_skip_verify: false
        cert_file: "/etc/ssl/certs/client.crt"
        key_file: "/etc/ssl/private/client.key"
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true

  # TCP probe
  tcp_connect:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true

  # TCP with TLS
  tcp_connect_tls:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true
      tls: true
      tls_config:
        insecure_skip_verify: false

  # PostgreSQL probe
  postgres_probe:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true
      query_response:
        - expect: "^SSH-2.0-"
          send: "SSH-2.0-blackbox-ssh-check"

  # Redis probe
  redis_probe:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true
      query_response:
        - send: "PING\r\n"
          expect: "\\+PONG\r\n"

  # DNS probe
  dns_probe:
    prober: dns
    timeout: 5s
    dns:
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true
      transport_protocol: "udp"
      query_name: "example.com"
      query_type: "A"
      valid_rcodes:
        - NOERROR

  # ICMP probe
  icmp_probe:
    prober: icmp
    timeout: 5s
    icmp:
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true
      dont_fragment: true

  # gRPC probe
  grpc_probe:
    prober: grpc
    timeout: 5s
    grpc:
      tls: true
      tls_config:
        insecure_skip_verify: false
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true
      service: "grpc.health.v1.Health"

  # Laboratory specific probes
  lab_api_health:
    prober: http
    timeout: 10s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200]
      method: GET
      headers:
        Accept: application/json
        X-API-Key: "${API_KEY}"
      fail_if_body_not_matches_regexp:
        - "\"status\":\\s*\"healthy\""
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true

  # Storage service availability
  storage_service_check:
    prober: http
    timeout: 10s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200]
      method: GET
      headers:
        Accept: application/json
      fail_if_body_not_matches_regexp:
        - "\"storage_zones\":\\s*\\["
        - "\"capacity_available\":\\s*true"
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true

  # Sequencing service probe
  sequencing_service_check:
    prober: http
    timeout: 15s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200]
      method: GET
      headers:
        Accept: application/json
      fail_if_body_not_matches_regexp:
        - "\"instruments_online\""
        - "\"queue_status\":\\s*\"active\""
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true