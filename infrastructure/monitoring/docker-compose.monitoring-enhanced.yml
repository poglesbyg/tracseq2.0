version: '3.8'

services:
  # ================================
  # CORE MONITORING STACK
  # ================================

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: tracseq-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus-enhanced.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - ./prometheus/alerts:/etc/prometheus/alerts
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
      - '--query.timeout=2m'
      - '--query.max-concurrency=20'
      - '--query.max-samples=50000000'
    networks:
      - monitoring-network
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Visualization & Dashboards
  grafana:
    image: grafana/grafana:10.0.0
    container_name: tracseq-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=tracseq-admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel,redis-datasource,marcusolsson-json-datasource
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/tracseq/service-overview.json
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_ALERTING_ENABLED=false
      - GF_EXPLORE_ENABLED=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring-network
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - prometheus
      - loki
      - jaeger

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: tracseq-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
      - "9411:9411"    # Zipkin compatible
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - QUERY_BASE_PATH=/jaeger
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
    volumes:
      - jaeger_badger_data:/badger
    networks:
      - monitoring-network
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:2.8.0
    container_name: tracseq-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/loki-config.yaml
      - loki_data:/loki
    networks:
      - monitoring-network
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail - Log Collection Agent
  promtail:
    image: grafana/promtail:2.8.0
    container_name: tracseq-promtail
    volumes:
      - ./promtail/promtail-config.yaml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring-network
      - microservices-network
    restart: unless-stopped
    depends_on:
      - loki

  # ================================
  # EXPORTERS
  # ================================

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: tracseq-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.netclass.ignored-devices=^(veth.*|docker.*|br-.*)$$'
      - '--collector.diskstats.ignored-devices=^(ram|loop|fd|(h|s|v|xv)d[a-z]|nvme\\d+n\\d+p)\\d+$$'
    networks:
      - monitoring-network
    restart: unless-stopped

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: tracseq-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    privileged: true
    devices:
      - /dev/kmsg
    command:
      - '--housekeeping_interval=10s'
      - '--docker_only=true'
      - '--store_container_labels=false'
      - '--whitelisted_container_labels=com.docker.compose.service'
    networks:
      - monitoring-network
    restart: unless-stopped

  # Redis Exporter - Redis Metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.52.0
    container_name: tracseq-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://enhanced_storage_service-redis-1:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_CHECK_KEYS=db0:sample_queue_*,db0:storage_capacity_*
      - REDIS_CHECK_STREAMS=db0:event_stream
    networks:
      - monitoring-network
      - enhanced_storage_service_enhanced_storage_network
    restart: unless-stopped

  # Postgres Exporter - Database Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.0
    container_name: tracseq-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@enhanced_storage_service-postgres-1:5432/lab_manager?sslmode=disable
      - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres_exporter/queries.yaml
      - PG_EXPORTER_DISABLE_DEFAULT_METRICS=false
      - PG_EXPORTER_DISABLE_SETTINGS_METRICS=false
    volumes:
      - ./postgres-exporter/queries.yaml:/etc/postgres_exporter/queries.yaml
    networks:
      - monitoring-network
      - enhanced_storage_service_enhanced_storage_network
    restart: unless-stopped

  # Blackbox Exporter - HTTP/TCP/DNS/ICMP probes
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: tracseq-blackbox-exporter
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox/blackbox.yml:/etc/blackbox_exporter/config.yml
    command:
      - '--config.file=/etc/blackbox_exporter/config.yml'
    networks:
      - monitoring-network
      - microservices-network
    restart: unless-stopped

  # Push Gateway - For batch jobs
  pushgateway:
    image: prom/pushgateway:v1.6.2
    container_name: tracseq-pushgateway
    ports:
      - "9091:9091"
    command:
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--persistence.file=/data/pushgateway.data'
      - '--persistence.interval=5m'
    volumes:
      - pushgateway_data:/data
    networks:
      - monitoring-network
    restart: unless-stopped

  # ================================
  # ALERTING
  # ================================

  # AlertManager - Alert Management
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: tracseq-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ./alertmanager/templates:/etc/alertmanager/templates
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--data.retention=120h'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.listen-address='
      - '--log.level=info'
    networks:
      - monitoring-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # ================================
  # ADDITIONAL MONITORING TOOLS
  # ================================

  # Uptime Kuma - Service Uptime Monitoring
  uptime-kuma:
    image: louislam/uptime-kuma:1.23.0
    container_name: tracseq-uptime-kuma
    ports:
      - "3002:3001"
    volumes:
      - uptime_kuma_data:/app/data
    networks:
      - monitoring-network
      - microservices-network
    restart: unless-stopped

  # Tempo - Distributed Tracing Backend (Alternative to Jaeger)
  tempo:
    image: grafana/tempo:2.2.0
    container_name: tracseq-tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
      - tempo_data:/tmp/tempo
    ports:
      - "3200:3200"   # tempo
      - "4317"        # otlp grpc
      - "4318"        # otlp http
    networks:
      - monitoring-network
      - microservices-network
    restart: unless-stopped

  # Mimir - Long-term Metrics Storage
  mimir:
    image: grafana/mimir:2.9.0
    container_name: tracseq-mimir
    command: ["-config.file=/etc/mimir.yaml"]
    volumes:
      - ./mimir/mimir.yaml:/etc/mimir.yaml
      - mimir_data:/data
    ports:
      - "9009:9009"
    networks:
      - monitoring-network
    restart: unless-stopped

# ================================
# VOLUMES
# ================================
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  alertmanager_data:
    driver: local
  uptime_kuma_data:
    driver: local
  jaeger_badger_data:
    driver: local
  pushgateway_data:
    driver: local
  tempo_data:
    driver: local
  mimir_data:
    driver: local

# ================================
# NETWORKS
# ================================
networks:
  monitoring-network:
    external: true
  microservices-network:
    external: true
    name: enhanced_storage_service_enhanced_storage_network
  enhanced_storage_service_enhanced_storage_network:
    external: true