apiVersion: apps/v1
kind: Deployment
metadata:
  name: rag-service
  namespace: tracseq
  labels:
    app.kubernetes.io/name: rag-service
    app.kubernetes.io/component: rag-service
    app.kubernetes.io/part-of: tracseq
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: rag-service
      app.kubernetes.io/component: rag-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rag-service
        app.kubernetes.io/component: rag-service
        app.kubernetes.io/part-of: tracseq
    spec:
      serviceAccountName: tracseq-rag-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: rag-service
        image: rag-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          protocol: TCP
          name: http
        env:
        - name: SERVICE_NAME
          value: "rag-service"
        - name: SERVICE_PORT
          value: "8000"
        # Database configuration
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: tracseq-database-credentials
              key: DATABASE_URL
        # Redis configuration
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: tracseq-database-credentials
              key: REDIS_URL
        # ChromaDB configuration
        - name: CHROMA_HOST
          valueFrom:
            configMapKeyRef:
              name: tracseq-common-config
              key: CHROMA_HOST
        - name: CHROMA_PORT
          valueFrom:
            configMapKeyRef:
              name: tracseq-common-config
              key: CHROMA_PORT
        - name: CHROMA_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: chromadb-auth-token
              key: token
        # AI service configuration
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: tracseq-jwt-secret
              key: OPENAI_API_KEY
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: tracseq-jwt-secret
              key: ANTHROPIC_API_KEY
        # Python specific
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: WORKERS
          value: "4"
        - name: THREADS
          value: "2"
        # Common configuration from ConfigMap
        envFrom:
        - configMapRef:
            name: tracseq-common-config
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          timeoutSeconds: 10
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: temp
          mountPath: /tmp
        - name: models
          mountPath: /app/models
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: temp
        emptyDir: {}
      - name: models
        persistentVolumeClaim:
          claimName: rag-models-pvc
      - name: cache
        emptyDir:
          sizeLimit: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: rag-service
  namespace: tracseq
  labels:
    app.kubernetes.io/name: rag-service
    app.kubernetes.io/component: rag-service
    app.kubernetes.io/part-of: tracseq
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app.kubernetes.io/name: rag-service
    app.kubernetes.io/component: rag-service
  sessionAffinity: None
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rag-models-pvc
  namespace: tracseq
  labels:
    app.kubernetes.io/name: rag-service
    app.kubernetes.io/component: rag-service
    app.kubernetes.io/part-of: tracseq
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  # StorageClass for RWX access
  # storageClassName: ocs-storagecluster-cephfs