services:
  # Database
  postgres:
    build: 
      context: ./postgres
      dockerfile: Dockerfile.simple  # Using simple version without pgvector
    container_name: lims-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: lims_db
    ports:
      - "5433:5432"  # Using 5433 to avoid conflict with existing PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - lims-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lims-redis
    ports:
      - "6380:6379"  # Using 6380 to avoid conflict with existing Redis
    networks:
      - lims-network

  # Core Rust Services
  auth-service:
    build: 
      context: ../lims-core/auth_service
      dockerfile: Dockerfile.fixed
    container_name: lims-auth
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/lims_db
      REDIS_URL: redis://redis:6379
      AUTH_PORT: "8000"  # Override default port
    depends_on:
      - postgres
      - redis
    ports:
      - "8011:8000"  # Using 8011 to avoid conflict
    networks:
      - lims-network

  sample-service:
    build:
      context: ../lims-core/sample_service
      dockerfile: Dockerfile.fixed
    container_name: lims-samples
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/lims_db
      REDIS_URL: redis://redis:6379
      SAMPLE_PORT: "8000"  # Override default port 8081
    depends_on:
      - postgres
      - redis
    ports:
      - "8012:8000"  # Using 8012 to avoid conflict
    networks:
      - lims-network

  storage-service:
    build:
      context: ../lims-core/enhanced_storage_service
      dockerfile: Dockerfile.simple  # Use simplified version
    container_name: lims-storage
    environment:
      STORAGE_DATABASE_URL: postgres://postgres:postgres@postgres:5432/lims_db
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/lims_db  # Keep for SQLx
      REDIS_URL: redis://redis:6379
      AUTH_SERVICE_URL: http://auth-service:8000
      STORAGE_PORT: "8080"  # Match the Dockerfile EXPOSE
      # Disable all advanced features for initial deployment
      IOT_ENABLED: "false"
      ANALYTICS_ENABLED: "false"
      DIGITAL_TWIN_ENABLED: "false"
      BLOCKCHAIN_ENABLED: "false"
      AUTOMATION_ENABLED: "false"
      # Add debug logging
      RUST_LOG: "debug,enhanced_storage_service=trace"
      RUST_BACKTRACE: "1"
    # Remove the command override now that we have a working binary
    depends_on:
      - postgres
      - redis
    ports:
      - "8013:8080"  # Match the Dockerfile EXPOSE port
    networks:
      - lims-network

  reports-service:
    build: 
      context: ../lims-core/reports_service
      dockerfile: Dockerfile.minimal
    container_name: lims-reports
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/lims_db
      REDIS_URL: redis://redis:6379
      REPORTS_PORT: "8000"
      RUST_LOG: "debug,reports_service=trace"
    depends_on:
      - postgres
      - redis
    ports:
      - "8014:8000"  # Using 8014 for reports service
    networks:
      - lims-network

  # AI Services
  rag-service:
    build:
      context: ../lims-ai/enhanced_rag_service
      dockerfile: Dockerfile
    container_name: lims-rag
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/lims_db
      REDIS_URL: redis://redis:6379
      OLLAMA_HOST: http://ollama:11434
    depends_on:
      - postgres
      - redis
    ports:
      - "8100:8000"
    networks:
      - lims-network

  # Frontend
  frontend:
    build:
      context: ../lims-ui
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ""  # Empty to use relative URLs through nginx proxy
    container_name: lims-frontend
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    networks:
      - lims-network

  # API Gateway
  api-gateway:
    build:
      context: ../lims-core/api_gateway
      dockerfile: Dockerfile
    container_name: lims-gateway
    environment:
      AUTH_SERVICE_URL: http://auth-service:8000
      SAMPLE_SERVICE_URL: http://sample-service:8000
      STORAGE_SERVICE_URL: http://storage-service:8080
      RAG_SERVICE_URL: http://rag-service:8000
      REPORTS_SERVICE_URL: http://reports-service:8000
      USE_REPORTS_SERVICE: "true"
    depends_on:
      - auth-service
      - sample-service
      - storage-service
      - reports-service
    ports:
      - "8089:8000"  # API Gateway runs on 8000 internally
    networks:
      - lims-network

volumes:
  postgres_data:

networks:
  lims-network:
    driver: bridge 