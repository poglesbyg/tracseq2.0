services:
  # Database
  postgres:
    build: 
      context: ./postgres
      dockerfile: Dockerfile.simple  # Using simple version without pgvector
    container_name: lims-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: lims_db
    ports:
      - "5433:5432"  # Using 5433 to avoid conflict with existing PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - lims-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lims-redis
    ports:
      - "6380:6379"  # Using 6380 to avoid conflict with existing Redis
    networks:
      - lims-network

  # Core Rust Services
  auth-service:
    build: 
      context: ../lims-core/auth_service
      dockerfile: Dockerfile.fixed
    container_name: lims-auth
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/lims_db
      REDIS_URL: redis://redis:6379
      AUTH_PORT: "8000"  # Override default port
    depends_on:
      - postgres
      - redis
    ports:
      - "8011:8000"  # Using 8011 to avoid conflict
    networks:
      - lims-network

  sample-service:
    build:
      context: ../lims-core/sample_service
      dockerfile: Dockerfile.fixed
    container_name: lims-samples
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/lims_db
      REDIS_URL: redis://redis:6379
      SAMPLE_PORT: "8000"  # Override default port 8081
    depends_on:
      - postgres
      - redis
    ports:
      - "8012:8000"  # Using 8012 to avoid conflict
    networks:
      - lims-network

  storage-service:
    build:
      context: ../lims-enhanced/enhanced_storage_service
      dockerfile: Dockerfile.minimal  # Use minimal Dockerfile with standalone version
    container_name: lims-storage
    environment:
      STORAGE_DATABASE_URL: postgres://postgres:postgres@postgres:5432/lims_db
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/lims_db  # Keep for SQLx
      REDIS_URL: redis://redis:6379
      AUTH_SERVICE_URL: http://auth-service:8000
      PORT: "8082"  # Match the standalone version default
      # Enable hierarchical storage features
      HIERARCHICAL_STORAGE_ENABLED: "true"
      # Enable analytics for production
      ANALYTICS_ENABLED: "true"
      # Disable advanced features for initial deployment
      IOT_ENABLED: "false"
      DIGITAL_TWIN_ENABLED: "false"
      BLOCKCHAIN_ENABLED: "false"
      AUTOMATION_ENABLED: "false"
      # Add debug logging
      RUST_LOG: "info,enhanced_storage_service=debug"
      RUST_BACKTRACE: "1"
    # Remove the command override now that we have a working binary
    depends_on:
      - postgres
      - redis
    ports:
      - "8013:8082"  # Match the standalone version port
    networks:
      - lims-network

  reports-service:
    build: 
      context: ../lims-core/reports_service
      dockerfile: Dockerfile.minimal
    container_name: lims-reports
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/lims_db
      REDIS_URL: redis://redis:6379
      REPORTS_PORT: "8000"
      RUST_LOG: "debug,reports_service=trace"
    depends_on:
      - postgres
      - redis
    ports:
      - "8014:8000"  # Using 8014 for reports service
    networks:
      - lims-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  template-service:
    build:
      context: ../lims-core/template_service
      dockerfile: Dockerfile
    container_name: lims-templates
    environment:
      - TEMPLATE_DATABASE_URL=postgresql://postgres:postgres@postgres:5432/lims_db
      - TEMPLATE_HOST=0.0.0.0
      - TEMPLATE_PORT=8000
      - RUST_LOG=info
      - AUTH_SERVICE_URL=http://auth-service:8000
      - SAMPLE_SERVICE_URL=http://sample-service:8000
      - TEMPLATE_MAX_PER_USER=100
      - TEMPLATE_MAX_FIELDS=50
      - TEMPLATE_CACHE_ENABLED=true
      - FEATURE_FORM_BUILDER=true
      - FEATURE_TEMPLATE_VERSIONING=true
      - FEATURE_FILE_UPLOAD=true
      - FILE_UPLOAD_PATH=/app/uploads
      - FILE_MAX_SIZE_MB=25
      - FILE_ALLOWED_EXTENSIONS=xlsx,csv,json,xml,txt
    ports:
      - "8083:8000"
    depends_on:
      - postgres
      - auth-service
      - sample-service
    networks:
      - lims-network
    restart: unless-stopped
    volumes:
      - template_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dashboard Service (Simple Python)
  dashboard-service:
    build:
      context: ../simple-services/dashboard-service
      dockerfile: Dockerfile
    container_name: lims-dashboard
    environment:
      - PORT=3025
    ports:
      - "3025:3025"
    networks:
      - lims-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3025/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spreadsheet Service (Simple Python)
  spreadsheet-service:
    build:
      context: ../simple-services/spreadsheet-service
      dockerfile: Dockerfile
    container_name: lims-spreadsheets
    environment:
      - PORT=8088
    ports:
      - "8088:8088"
    networks:
      - lims-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sequencing Service (Simple Python)
  sequencing-service:
    build:
      context: ../simple-services/sequencing-service
      dockerfile: Dockerfile
    container_name: lims-sequencing
    environment:
      - PORT=8084
    ports:
      - "8084:8084"
    networks:
      - lims-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Samples Service (Simple Python - replaces failing Rust service)
  simple-samples-service:
    build:
      context: ../simple-services/samples-service
      dockerfile: Dockerfile
    container_name: lims-samples-simple
    environment:
      - PORT=8081
    ports:
      - "8015:8081"
    networks:
      - lims-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend UI (React application)
  frontend-ui:
    build:
      context: ../lims-ui
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://localhost:3000
    container_name: lims-frontend-ui
    ports:
      - "3001:80"
    networks:
      - lims-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Proxy (routes frontend API calls to API Gateway)
  frontend-proxy:
    build:
      context: ../simple-services/frontend-proxy
      dockerfile: Dockerfile
    container_name: lims-frontend-proxy
    environment:
      - PORT=3000
      - API_GATEWAY_URL=http://lims-gateway:8000
    ports:
      - "3000:3000"
    networks:
      - lims-network
    restart: unless-stopped
    depends_on:
      - api-gateway
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Services
  ollama:
    image: ollama/ollama:latest
    container_name: lims-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - lims-network

  rag-service:
    build:
      context: ../lims-ai/enhanced_rag_service
      dockerfile: Dockerfile
    container_name: lims-rag
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/lims_db
      REDIS_URL: redis://redis:6379
      OLLAMA_HOST: http://ollama:11434
    depends_on:
      - postgres
      - redis
      - ollama
    ports:
      - "8100:8000"
    networks:
      - lims-network

  # Frontend
  frontend:
    build:
      context: ../lims-ui
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ""  # Empty to use relative URLs through nginx proxy
    container_name: lims-frontend
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    networks:
      - lims-network

  # API Gateway
  api-gateway:
    build:
      context: ../lims-gateway/api_gateway
      dockerfile: Dockerfile
    container_name: lims-gateway
    environment:
      AUTH_SERVICE_URL: http://lims-auth:8000
      SAMPLE_SERVICE_URL: http://lims-samples-simple:8081
      STORAGE_SERVICE_URL: http://lims-storage:8082
      RAG_SERVICE_URL: http://lims-rag:8000
      REPORTS_SERVICE_URL: http://lims-reports:8000
      TEMPLATE_SERVICE_URL: http://lims-templates:8000
      DASHBOARD_SERVICE_URL: http://lims-dashboard:3025
      SPREADSHEET_SERVICE_URL: http://lims-spreadsheets:8088
      SEQUENCING_SERVICE_URL: http://lims-sequencing:8084
      NOTIFICATION_SERVICE_URL: http://tracseq-notification:8085
      USE_REPORTS_SERVICE: "true"
    depends_on:
      - auth-service
      - sample-service
      - storage-service
      - reports-service
      - dashboard-service
      - spreadsheet-service
      - sequencing-service
      - simple-samples-service
    ports:
      - "8089:8000"  # API Gateway runs on 8000 internally
    networks:
      - lims-network

volumes:
  postgres_data:
  ollama_data:
  template_uploads:

networks:
  lims-network:
    driver: bridge 