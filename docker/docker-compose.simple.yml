services:
  # Frontend Service - Standalone React Application  
  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    container_name: tracseq-enhanced-frontend
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8089
      - NODE_ENV=production
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    volumes:
      - frontend_logs:/var/log/nginx
    restart: unless-stopped
    networks:
      - tracseq_enhanced_network

  # API Gateway - Central Routing Hub
  api-gateway:
    build:
      context: api_gateway
      dockerfile: Dockerfile
    container_name: tracseq-enhanced-api-gateway
    ports:
      - "8089:8000"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=DEBUG
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
      - RAG_SERVICE_URL=http://rag-service:8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - gateway_logs:/app/logs
    restart: unless-stopped
    networks:
      - tracseq_enhanced_network

  # RAG Service - AI/ML Processing
  rag-service:
    build:
      context: enhanced_rag_service
      dockerfile: Dockerfile
    container_name: tracseq-enhanced-rag-service
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=postgresql://tracseq_admin:tracseq_secure_password@postgres:5432/rag_db
      - REDIS_URL=redis://:tracseq_redis_password@redis:6379/2
      - OLLAMA_BASE_URL=http://ollama:11434
      - LOG_LEVEL=DEBUG
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    volumes:
      - rag_uploads:/app/uploads
      - rag_exports:/app/exports
      - rag_logs:/app/logs
    restart: unless-stopped
    networks:
      - tracseq_enhanced_network

  # PostgreSQL Database
  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    container_name: tracseq-enhanced-postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: tracseq_main
      POSTGRES_USER: tracseq_admin
      POSTGRES_PASSWORD: tracseq_secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tracseq_admin -d tracseq_main"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - tracseq_enhanced_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tracseq-enhanced-redis
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes --requirepass tracseq_redis_password
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "tracseq_redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - tracseq_enhanced_network

  # Ollama AI Service
  ollama:
    image: ollama/ollama:latest
    container_name: tracseq-enhanced-ollama
    ports:
      - "11435:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - tracseq_enhanced_network

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  rag_uploads:
  rag_exports:
  rag_logs:
  gateway_logs:
  frontend_logs:

networks:
  tracseq_enhanced_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 